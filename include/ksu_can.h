#pragma once // Make sure the file is only included once

/** CAN message encoder/decoder: automatically generated - do not edit
 * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef KSU_CAN_H
#define KSU_CAN_H

/* If the contents of this file have caused breaking changes for you, you could
   try using an older version of the generator. You can specify this on the
   command line with the -n option. */
#define DBCC_GENERATOR_VERSION (3)

#include <stdint.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32_t
    dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
  DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
  DBCC_SIG_STAT_OK_E = 1,            /* Message ok */
  DBCC_SIG_STAT_ERROR_E = 2,         /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

#define CAN_ID_SEGMENT1_TEMPS1 (26)                   /* 0x1a */
#define CAN_ID_SEGMENT1_TEMPS2 (27)                   /* 0x1b */
#define CAN_ID_SEGMENT1_SHT (28)                      /* 0x1c */
#define CAN_ID_SEGMENT2_TEMPS1 (42)                   /* 0x2a */
#define CAN_ID_SEGMENT2_TEMPS2 (43)                   /* 0x2b */
#define CAN_ID_SEGMENT2_SHT (44)                      /* 0x2c */
#define CAN_ID_SEGMENT3_TEMPS1 (58)                   /* 0x3a */
#define CAN_ID_SEGMENT3_TEMPS2 (59)                   /* 0x3b */
#define CAN_ID_SEGMENT3_SHT (60)                      /* 0x3c */
#define CAN_ID_SEGMENT4_TEMPS1 (74)                   /* 0x4a */
#define CAN_ID_SEGMENT4_TEMPS2 (75)                   /* 0x4b */
#define CAN_ID_SEGMENT4_SHT (76)                      /* 0x4c */
#define CAN_ID_SEGMENT5_TEMPS1 (90)                   /* 0x5a */
#define CAN_ID_SEGMENT5_TEMPS2 (91)                   /* 0x5b */
#define CAN_ID_SEGMENT5_SHT (92)                      /* 0x5c */
#define CAN_ID_PRECHARGE_STATUS (105)                 /* 0x69 */
#define CAN_ID_SEGMENT6_TEMPS1 (106)                  /* 0x6a */
#define CAN_ID_SEGMENT6_TEMPS2 (107)                  /* 0x6b */
#define CAN_ID_SEGMENT6_SHT (108)                     /* 0x6c */
#define CAN_ID_M160_TEMPERATURE_SET_1 (160)           /* 0xa0 */
#define CAN_ID_M161_TEMPERATURE_SET_2 (161)           /* 0xa1 */
#define CAN_ID_M162_TEMPERATURE_SET_3 (162)           /* 0xa2 */
#define CAN_ID_M163_ANALOG_INPUT_VOLTAGES (163)       /* 0xa3 */
#define CAN_ID_M164_DIGITAL_INPUT_STATUS (164)        /* 0xa4 */
#define CAN_ID_M165_MOTOR_POSITION_INFO (165)         /* 0xa5 */
#define CAN_ID_M166_CURRENT_INFO (166)                /* 0xa6 */
#define CAN_ID_M167_VOLTAGE_INFO (167)                /* 0xa7 */
#define CAN_ID_M168_FLUX_ID_IQ_INFO (168)             /* 0xa8 */
#define CAN_ID_M169_INTERNAL_VOLTAGES (169)           /* 0xa9 */
#define CAN_ID_M170_INTERNAL_STATES (170)             /* 0xaa */
#define CAN_ID_M171_FAULT_CODES (171)                 /* 0xab */
#define CAN_ID_M172_TORQUE_AND_TIMER_INFO (172)       /* 0xac */
#define CAN_ID_M173_MODULATION_AND_FLUX_INFO (173)    /* 0xad */
#define CAN_ID_M174_FIRMWARE_INFO (174)               /* 0xae */
#define CAN_ID_M175_DIAG_DATA (175)                   /* 0xaf */
#define CAN_ID_M192_COMMAND_MESSAGE (192)             /* 0xc0 */
#define CAN_ID_M193_READ_WRITE_PARAM_COMMAND (193)    /* 0xc1 */
#define CAN_ID_M194_READ_WRITE_PARAM_RESPONSE (194)   /* 0xc2 */
#define CAN_ID_VCU_STATUS (195)                       /* 0xc3 */
#define CAN_ID_VCU_PEDAL_READINGS (196)               /* 0xc4 */
#define CAN_ID_VCU_WHEELSPEED_READINGS (198)          /* 0xc6 */
#define CAN_ID_VCU_PEDAL_THRESHOLD_SETTINGS (199)     /* 0xc7 */
#define CAN_ID_VCU_FIRMWARE_VERSION (200)             /* 0xc8 */
#define CAN_ID_VCU_BOARD_READINGS_ONE (201)           /* 0xc9 */
#define CAN_ID_VCU_BOARD_READINGS_TWO (202)           /* 0xca */
#define CAN_ID_VCU_LAUNCHCONTROL_DIAGDATA (203)       /* 0xcb */
#define CAN_ID_VCU_PEDALS_TRAVEL (204)                /* 0xcc */
#define CAN_ID_VCU_LAUNCHCONTROL_COUNTDOWN (205)      /* 0xcd */
#define CAN_ID_VCU_DISTANCE_TRACKER_MOTOR (206)       /* 0xce */
#define CAN_ID_VCU_DISTANCE_TRACKER_WHEELSPEED (207)  /* 0xcf */
#define CAN_ID_VCU_LIFETIME_DISTANCE_AND_ONTIME (208) /* 0xd0 */
#define CAN_ID_VCU_TRACTIONCONTROL_DIAGDATA (209)     /* 0xd1 */
#define CAN_ID_VCU_DISTANCE_TRACKER_VECTORNAV (210)   /* 0xd2 */
#define CAN_ID_VCU_COULOMB_COUNTERS (211)             /* 0xd3 */
#define CAN_ID_VCU_CALCULATED_SLIP (212)              /* 0xd4 */
#define CAN_ID_VCU_POWER_LIMIT_UPDATE (213)           /* 0xd5 */
#define CAN_ID_DASH_BUTTONS (235)                     /* 0xeb */
#define CAN_ID_DASH_FIRMWARE_VERSION (236)            /* 0xec */
#define CAN_ID_M188_U2C_MESSAGE_RXD (469)             /* 0x1d5 */
#define CAN_ID_M187_U2C_COMMAND_TXD (471)             /* 0x1d7 */
#define CAN_ID_EVELOGGER_VECTORNAV_TIME (500)         /* 0x1f4 */
#define CAN_ID_EVELOGGER_VECTORNAV_ATTITUDE (501)     /* 0x1f5 */
#define CAN_ID_EVELOGGER_VECTORNAV_GYRO (502)         /* 0x1f6 */
#define CAN_ID_EVELOGGER_VECTORNAV_POSITION (503)     /* 0x1f7 */
#define CAN_ID_EVELOGGER_VECTORNAV_VELOCITY (504)     /* 0x1f8 */
#define CAN_ID_EVELOGGER_VECTORNAV_ACCELERATION (505) /* 0x1f9 */
#define CAN_ID_BMS_CURRENT_LIMIT (514)                /* 0x202 */
#define CAN_ID_ACU_SHUTDOWN_STATUS (600)              /* 0x258 */
#define CAN_ID_ACU_BOARD_VOLTAGE_READINGS (601)       /* 0x259 */
#define CAN_ID_ACU_FIRMWARE_VERSION (602)             /* 0x25a */
#define CAN_ID_CORNERNODE_FL_SHOCKPOT (900)           /* 0x384 */
#define CAN_ID_CORNERNODE_FR_SHOCKPOT (901)           /* 0x385 */
#define CAN_ID_CORNERNODE_RL_SHOCKPOT (902)           /* 0x386 */
#define CAN_ID_CORNERNODE_RR_SHOCKPOT (903)           /* 0x387 */
#define CAN_ID_CORNERNODE_FL_WHEELSPEED (904)         /* 0x388 */
#define CAN_ID_CORNERNODE_FR_WHEELSPEED (905)         /* 0x389 */
#define CAN_ID_CORNERNODE_RL_WHEELSPEED (906)         /* 0x38a */
#define CAN_ID_CORNERNODE_RR_WHEELSPEED (907)         /* 0x38b */
#define CAN_ID_CORNERNODE_FL_TIRETEMP (908)           /* 0x38c */
#define CAN_ID_CORNERNODE_FR_TIRETEMP (909)           /* 0x38d */
#define CAN_ID_CORNERNODE_RL_TIRETEMP (910)           /* 0x38e */
#define CAN_ID_CORNERNODE_RR_TIRETEMP (911)           /* 0x38f */
#define CAN_ID_CORNERNODE_FRONT_BRAKEPRESSURE (912)   /* 0x390 */
#define CAN_ID_CORNERNODE_REAR_BRAKEPRESSURE (913)    /* 0x391 */
#define CAN_ID_OMNI_STATUS (1100)                     /* 0x44c */
#define CAN_ID_OMNI_ACCEL_DATA (1101)                 /* 0x44d */
#define CAN_ID_OMNI_GYRO_DATA (1102)                  /* 0x44e */
#define CAN_ID_OMNI_HEADING_DATA (1103)               /* 0x44f */
#define CAN_ID_OMNI_SHOCKPOT_DATA (1104)              /* 0x450 */
#define CAN_ID_OMNI_STEERING_DATA (1105)              /* 0x451 */
#define CAN_ID_OMNI_GPS_POSITION (1106)               /* 0x452 */
#define CAN_ID_MEGASQUIRT_GP0 (1520)                  /* 0x5f0 */
#define CAN_ID_MEGASQUIRT_GP1 (1521)                  /* 0x5f1 */
#define CAN_ID_MEGASQUIRT_GP2 (1522)                  /* 0x5f2 */
#define CAN_ID_MEGASQUIRT_GP3 (1523)                  /* 0x5f3 */
#define CAN_ID_MEGASQUIRT_GP4 (1524)                  /* 0x5f4 */
#define CAN_ID_MEGASQUIRT_GP5 (1525)                  /* 0x5f5 */
#define CAN_ID_MEGASQUIRT_GP6 (1526)                  /* 0x5f6 */
#define CAN_ID_MEGASQUIRT_GP7 (1527)                  /* 0x5f7 */
#define CAN_ID_MEGASQUIRT_GP8 (1528)                  /* 0x5f8 */
#define CAN_ID_MEGASQUIRT_GP9 (1529)                  /* 0x5f9 */
#define CAN_ID_MEGASQUIRT_GP10 (1530)                 /* 0x5fa */
#define CAN_ID_MEGASQUIRT_GP11 (1531)                 /* 0x5fb */
#define CAN_ID_MEGASQUIRT_GP12 (1532)                 /* 0x5fc */
#define CAN_ID_MEGASQUIRT_GP13 (1533)                 /* 0x5fd */
#define CAN_ID_MEGASQUIRT_GP14 (1534)                 /* 0x5fe */
#define CAN_ID_MEGASQUIRT_GP15 (1535)                 /* 0x5ff */
#define CAN_ID_MEGASQUIRT_GP16 (1536)                 /* 0x600 */
#define CAN_ID_MEGASQUIRT_GP17 (1537)                 /* 0x601 */
#define CAN_ID_MEGASQUIRT_GP18 (1538)                 /* 0x602 */
#define CAN_ID_MEGASQUIRT_GP19 (1539)                 /* 0x603 */
#define CAN_ID_MEGASQUIRT_GP20 (1540)                 /* 0x604 */
#define CAN_ID_MEGASQUIRT_GP21 (1541)                 /* 0x605 */
#define CAN_ID_MEGASQUIRT_GP22 (1542)                 /* 0x606 */
#define CAN_ID_MEGASQUIRT_GP23 (1543)                 /* 0x607 */
#define CAN_ID_MEGASQUIRT_GP24 (1544)                 /* 0x608 */
#define CAN_ID_MEGASQUIRT_GP25 (1545)                 /* 0x609 */
#define CAN_ID_MEGASQUIRT_GP26 (1546)                 /* 0x60a */
#define CAN_ID_MEGASQUIRT_GP27 (1547)                 /* 0x60b */
#define CAN_ID_MEGASQUIRT_GP28 (1548)                 /* 0x60c */
#define CAN_ID_MEGASQUIRT_GP29 (1549)                 /* 0x60d */
#define CAN_ID_MEGASQUIRT_GP30 (1550)                 /* 0x60e */
#define CAN_ID_MEGASQUIRT_GP31 (1551)                 /* 0x60f */
#define CAN_ID_MEGASQUIRT_GP32 (1552)                 /* 0x610 */
#define CAN_ID_MEGASQUIRT_GP33 (1553)                 /* 0x611 */
#define CAN_ID_MEGASQUIRT_GP34 (1554)                 /* 0x612 */
#define CAN_ID_MEGASQUIRT_GP35 (1555)                 /* 0x613 */
#define CAN_ID_MEGASQUIRT_GP36 (1556)                 /* 0x614 */
#define CAN_ID_MEGASQUIRT_GP37 (1557)                 /* 0x615 */
#define CAN_ID_MEGASQUIRT_GP38 (1558)                 /* 0x616 */
#define CAN_ID_MEGASQUIRT_GP39 (1559)                 /* 0x617 */
#define CAN_ID_MEGASQUIRT_GP40 (1560)                 /* 0x618 */
#define CAN_ID_MEGASQUIRT_GP41 (1561)                 /* 0x619 */
#define CAN_ID_MEGASQUIRT_GP42 (1562)                 /* 0x61a */
#define CAN_ID_MEGASQUIRT_GP43 (1563)                 /* 0x61b */
#define CAN_ID_MEGASQUIRT_GP44 (1564)                 /* 0x61c */
#define CAN_ID_MEGASQUIRT_GP45 (1565)                 /* 0x61d */
#define CAN_ID_MEGASQUIRT_GP46 (1566)                 /* 0x61e */
#define CAN_ID_MEGASQUIRT_GP47 (1567)                 /* 0x61f */
#define CAN_ID_MEGASQUIRT_GP48 (1568)                 /* 0x620 */
#define CAN_ID_MEGASQUIRT_GP49 (1569)                 /* 0x621 */
#define CAN_ID_MEGASQUIRT_GP50 (1570)                 /* 0x622 */
#define CAN_ID_MEGASQUIRT_GP51 (1571)                 /* 0x623 */
#define CAN_ID_MEGASQUIRT_GP52 (1572)                 /* 0x624 */
#define CAN_ID_MEGASQUIRT_GP53 (1573)                 /* 0x625 */
#define CAN_ID_MEGASQUIRT_GP54 (1574)                 /* 0x626 */
#define CAN_ID_MEGASQUIRT_GP55 (1575)                 /* 0x627 */
#define CAN_ID_MEGASQUIRT_GP56 (1576)                 /* 0x628 */
#define CAN_ID_MEGASQUIRT_GP57 (1577)                 /* 0x629 */
#define CAN_ID_MEGASQUIRT_GP58 (1578)                 /* 0x62a */
#define CAN_ID_MEGASQUIRT_GP59 (1579)                 /* 0x62b */
#define CAN_ID_MEGASQUIRT_GP60 (1580)                 /* 0x62c */
#define CAN_ID_MEGASQUIRT_GP61 (1581)                 /* 0x62d */
#define CAN_ID_MEGASQUIRT_GP62 (1582)                 /* 0x62e */
#define CAN_ID_MEGASQUIRT_GP63 (1583)                 /* 0x62f */
#define CAN_ID_MSGID_0X6B1 (1713)                     /* 0x6b1 */
#define CAN_ID_MSGID_0X6B2 (1714)                     /* 0x6b2 */
#define CAN_ID_MSGID_0X6B3 (1715)                     /* 0x6b3 */

/* raw ADC voltage reading of module1 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell1temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell2temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell3temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell4temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell5temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell6temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x01a_segment1_temps1_t;

/* raw ADC voltage reading of module1 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell7temp;  /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell8temp;  /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell9temp;  /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell10temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell11temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell12temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x01b_segment1_temps2_t;

/* temperature and humidity from sht sensor of segment 1 */
typedef PREPACK struct {
  uint16_t segment1_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment1_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x01c_segment1_sht_t;

/* raw ADC voltage reading of module2 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell13temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell14temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell15temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell16temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell17temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell18temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x02a_segment2_temps1_t;

/* raw ADC voltage reading of module2 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell19temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell20temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell21temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell22temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell23temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell24temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x02b_segment2_temps2_t;

/* temperature and humidity from sht sensor of segment 2 */
typedef PREPACK struct {
  uint16_t segment2_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment2_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x02c_segment2_sht_t;

/* raw ADC voltage reading of module3 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell25temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell26temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell27temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell28temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell29temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell30temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x03a_segment3_temps1_t;

/* raw ADC voltage reading of module3 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell31temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell32temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell33temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell34temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell35temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell36temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x03b_segment3_temps2_t;

/* temperature and humidity from sht sensor of segment 3 */
typedef PREPACK struct {
  uint16_t segment3_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment3_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x03c_segment3_sht_t;

/* raw ADC voltage reading of module4 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell37temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell38temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell39temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell40temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell41temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell42temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x04a_segment4_temps1_t;

/* raw ADC voltage reading of module4 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell43temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell44temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell45temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell46temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell47temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell48temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x04b_segment4_temps2_t;

/* temperature and humidity from sht sensor of segment 4 */
typedef PREPACK struct {
  uint16_t segment4_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment4_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x04c_segment4_sht_t;

/* raw ADC voltage reading of module5 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell49temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell50temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell51temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell52temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell53temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell54temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x05a_segment5_temps1_t;

/* raw ADC voltage reading of module5 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell55temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell56temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell57temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell58temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell59temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell60temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x05b_segment5_temps2_t;

/* temperature and humidity from sht sensor of segment 5 */
typedef PREPACK struct {
  uint16_t segment5_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment5_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x05c_segment5_sht_t;

typedef PREPACK struct {
  /* precharge_state: 0 - standby, 1 - precharging, 2 - running, 3 - error */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t precharge_state;
  uint8_t precharge_accVoltageMod100; /* scaling 1.0, offset 0.0, units none  */
  uint8_t precharge_accVoltageDiv100; /* scaling 1.0, offset 0.0, units none  */
  uint8_t precharge_tsVoltageMod100;  /* scaling 1.0, offset 0.0, units none  */
  uint8_t precharge_tsVoltageDiv100;  /* scaling 1.0, offset 0.0, units none  */
  uint8_t precharge_errorCode;        /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x069_precharge_status_t;

/* raw ADC voltage reading of module6 cells 1-6 */
typedef PREPACK struct {
  uint16_t cell61temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell62temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell63temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell64temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell65temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell66temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x06a_segment6_temps1_t;

/* raw ADC voltage reading of module6 cells 6-12 */
typedef PREPACK struct {
  uint16_t cell67temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell68temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell69temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell70temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell71temp; /* scaling 0.0, offset 0.0, units none  */
  uint16_t cell72temp; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x06b_segment6_temps2_t;

/* temperature and humidity from sht sensor of segment 6 */
typedef PREPACK struct {
  uint16_t segment6_temperature; /* scaling 0.0, offset 0.0, units none  */
  uint16_t segment6_humidity;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x06c_segment6_sht_t;

typedef PREPACK struct {
  /* D1_Module_A: IGBT Module A Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D1_Module_A;
  /* D2_Module_B: IGBT Module B Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D2_Module_B;
  /* D3_Module_C: IGBT Module C Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D3_Module_C;
  /* D4_Gate_Driver_Board: Gate Driver Board Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D4_Gate_Driver_Board;
} POSTPACK can_0x0a0_M160_Temperature_Set_1_t;

typedef PREPACK struct {
  /* D1_Control_Board_Temperature: Control Board Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D1_Control_Board_Temperature;
  /* D2_RTD1_Temperature: RTD input 1 (PT1000) Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D2_RTD1_Temperature;
  /* D3_RTD2_Temperature: RTD input 2 (PT1000) Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D3_RTD2_Temperature;
  /* D4_RTD3_Temperature: RTD input 3 (PT1000) Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D4_RTD3_Temperature;
} POSTPACK can_0x0a1_M161_Temperature_Set_2_t;

typedef PREPACK struct {
  /* D1_RTD4_Temperature: RTD 4 (PT1000) Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D1_RTD4_Temperature;
  /* D2_RTD5_Temperature: RTD 5 (PT1000) Temperature */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D2_RTD5_Temperature;
  /* D3_Motor_Temperature: Motor Temperature Sensor */
  /* scaling 0.1, offset 0.0, units degC  */
  int16_t D3_Motor_Temperature;
  /* D4_Torque_Shudder: Shudder compensation value of torque */
  /* scaling 0.1, offset 0.0, units Nm  */
  int16_t D4_Torque_Shudder;
} POSTPACK can_0x0a2_M162_Temperature_Set_3_t;

/*  */
typedef PREPACK struct {
  /* D1_Analog_Input_1: Voltage on Analog Input #1 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D1_Analog_Input_1;
  /* D2_Analog_Input_2: Voltage on Analog Input #2 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D2_Analog_Input_2;
  /* D3_Analog_Input_3: Voltage on Analog Input #3 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D3_Analog_Input_3;
  /* D4_Analog_Input_4: Voltage on Analog Input #4 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D4_Analog_Input_4;
  /* D5_Analog_Input_5: Voltage on Analog Input #5 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D5_Analog_Input_5;
  /* D6_Analog_Input_6: Voltage on Analog Input #6 */
  /* scaling 0.0, offset 0.0, units V  */
  uint16_t D6_Analog_Input_6;
} POSTPACK can_0x0a3_M163_Analog_Input_Voltages_t;

typedef PREPACK struct {
  /* D1_Digital_Input_1: Status of Digital Input #1 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D1_Digital_Input_1;
  /* D2_Digital_Input_2: Status of Digital Input #2 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D2_Digital_Input_2;
  /* D3_Digital_Input_3: Status of Digital Input #3 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D3_Digital_Input_3;
  /* D4_Digital_Input_4: Status of Digital Input #4 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D4_Digital_Input_4;
  /* D5_Digital_Input_5: Status of Digital Input #5 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D5_Digital_Input_5;
  /* D6_Digital_Input_6: Status of Digital Input #6 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D6_Digital_Input_6;
  /* D7_Digital_Input_7: Status of Digital Input #7 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D7_Digital_Input_7;
  /* D8_Digital_Input_8: Status of Digital Input #8 */
  /* scaling 1.0, offset 0.0, units boolean  */
  uint8_t D8_Digital_Input_8;
} POSTPACK can_0x0a4_M164_Digital_Input_Status_t;

typedef PREPACK struct {
  /* D1_Motor_Angle_Electrical: The Electrical Angle of the motor as read by the
   * encoder or resolver */
  /* scaling 0.1, offset 0.0, units deg  */
  uint16_t D1_Motor_Angle_Electrical;
  /* D2_Motor_Speed: The measured speed of the motor */
  /* scaling 1.0, offset 0.0, units rpm  */
  int16_t D2_Motor_Speed;
  /* D3_Electrical_Output_Frequency: The actual electrical frequency of the
   * inverter */
  /* scaling 0.1, offset 0.0, units hz  */
  int16_t D3_Electrical_Output_Frequency;
  /* D4_Delta_Resolver_Filtered: Used in calibration of resolver angle
   * adjustment. */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t D4_Delta_Resolver_Filtered;
} POSTPACK can_0x0a5_M165_Motor_Position_Info_t;

typedef PREPACK struct {
  /* D1_Phase_A_Current: The measured value of Phase A current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D1_Phase_A_Current;
  /* D2_Phase_B_Current: The measured value of Phase B current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D2_Phase_B_Current;
  /* D3_Phase_C_Current: The measured value of Phase C current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D3_Phase_C_Current;
  /* D4_DC_Bus_Current: The Calculated DC Bus Current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D4_DC_Bus_Current;
} POSTPACK can_0x0a6_M166_Current_Info_t;

typedef PREPACK struct {
  /* D1_DC_Bus_Voltage: The actual measured value of the DC bus voltage */
  /* scaling 0.1, offset 0.0, units V  */
  int16_t D1_DC_Bus_Voltage;
  /* D2_Output_Voltage: The calculated value of the output voltage, in peak
   * line-neutral volts */
  /* scaling 0.1, offset 0.0, units V  */
  int16_t D2_Output_Voltage;
  /* D3_VAB_Vd_Voltage: Measured value of the voltage betwen phase A and Phase B
   */
  /* scaling 0.1, offset 0.0, units V  */
  int16_t D3_VAB_Vd_Voltage;
  /* D4_VBC_Vq_Voltage: Measured value of the voltage between Phase B and Phase
   * C */
  /* scaling 0.1, offset 0.0, units V  */
  int16_t D4_VBC_Vq_Voltage;
} POSTPACK can_0x0a7_M167_Voltage_Info_t;

typedef PREPACK struct {
  /* D1_Flux_Command: The commanded flux */
  /* scaling 0.0, offset 0.0, units Wb  */
  int16_t D1_Flux_Command;
  /* D2_Flux_Feedback: The estimated flux */
  /* scaling 0.0, offset 0.0, units Wb  */
  int16_t D2_Flux_Feedback;
  /* D3_Id: The measured Id current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D3_Id;
  /* D4_Iq: The measured Iq current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D4_Iq;
} POSTPACK can_0x0a8_M168_Flux_ID_IQ_Info_t;

typedef PREPACK struct {
  /* D1_Reference_Voltage_1_5: Internal reference voltage */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t D1_Reference_Voltage_1_5;
  /* D2_Reference_Voltage_2_5: Internal reference voltage */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t D2_Reference_Voltage_2_5;
  /* D3_Reference_Voltage_5_0: Transducer voltage */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t D3_Reference_Voltage_5_0;
  /* D4_Reference_Voltage_12_0: 12V Input Voltage */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t D4_Reference_Voltage_12_0;
} POSTPACK can_0x0a9_M169_Internal_Voltages_t;

typedef PREPACK struct {
  /* D1_VSM_State: Different states for the vehicle state machine */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D1_VSM_State;
  /* D2_Inverter_State: Different states for the inverter state machine */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D2_Inverter_State;
  /* D4_Inverter_Discharge_State: 0 = Disabled, 1 = Enabled, 2 = Speed Check, 3
   * = Active, 4 = Complete */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D4_Inverter_Discharge_State;
  /* D3_Relay_1_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_1_Status;
  /* D3_Relay_2_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_2_Status;
  /* D3_Relay_3_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_3_Status;
  /* D3_Relay_4_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_4_Status;
  /* D3_Relay_5_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_5_Status;
  /* D3_Relay_6_Status: 0=OFF, 1=ON */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D3_Relay_6_Status;
  /* D4_Inverter_Run_Mode: 0=Torque Mode, 1=Speed Mode */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D4_Inverter_Run_Mode;
  /* D5_Inverter_Command_Mode: 0=CAN mode, 1=VSM mode */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D5_Inverter_Command_Mode;
  /* D6_Inverter_Enable_State: 0=Inverter Disabled,
1=Inverter Enabled */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D6_Inverter_Enable_State;
  /* D6_Inverter_Enable_Lockout: 0=Lockout Disabled, 1=Lockout Enabled */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D6_Inverter_Enable_Lockout;
  /* D7_Direction_Command: 1 = Forward
0 = 'Reverse' if inverter enabled  & 'Stopped' if inverter is disabled */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D7_Direction_Command;
  /* D7_BMS_Active: 0 = BMS Not Active, 1 = BMS Active */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D7_BMS_Active;
  /* D7_BMS_Torque_Limiting: 0 = Not Limiting, 1 = Limiting */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D7_BMS_Torque_Limiting;
} POSTPACK can_0x0aa_M170_Internal_States_t;

typedef PREPACK struct {
  /* D1_Post_Fault_Lo: Each bit represents a fault. Please refer to PM100 Users
   * Manual for details. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D1_Post_Fault_Lo;
  /* D2_Post_Fault_Hi: Each bit represents a fault. Please refer to PM100 Users
   * Manual for details. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D2_Post_Fault_Hi;
  /* D3_Run_Fault_Lo: Each bit represents a fault. Please refer to PM100 Users
   * Manual for details. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D3_Run_Fault_Lo;
  /* D4_Run_Fault_Hi: Each bit represents a fault. Please refer to PM100 Users
   * Manual for details. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D4_Run_Fault_Hi;
} POSTPACK can_0x0ab_M171_Fault_Codes_t;

typedef PREPACK struct {
  /* D3_Power_On_Timer: Updated every 3 msec. This will roll over in
   * approximately 150 days! */
  /* scaling 0.0, offset 0.0, units Sec  */
  uint32_t D3_Power_On_Timer;
  /* D1_Commanded_Torque: The commanded Torque */
  /* scaling 0.1, offset 0.0, units Nm  */
  int16_t D1_Commanded_Torque;
  /* D2_Torque_Feedback: Estimated motor torque feedback */
  /* scaling 0.1, offset 0.0, units Nm  */
  int16_t D2_Torque_Feedback;
} POSTPACK can_0x0ac_M172_Torque_And_Timer_Info_t;

typedef PREPACK struct {
  /* D1_Modulation_Index: This is the modulation index. The scale factor is
   * x100. To get the actual modulation index divide the value by 100. */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t D1_Modulation_Index;
  /* D2_Flux_Weakening_Output: This is the current output of the flux regulator.
   */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D2_Flux_Weakening_Output;
  /* D3_Id_Command: The commanded D-axis current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D3_Id_Command;
  /* D4_Iq_Command: The commanded Q-axis current */
  /* scaling 0.1, offset 0.0, units A  */
  int16_t D4_Iq_Command;
} POSTPACK can_0x0ad_M173_Modulation_And_Flux_Info_t;

typedef PREPACK struct {
  uint16_t D1_Project_Code_EEP_Ver; /* scaling 1.0, offset 0.0, units none  */
  uint16_t D2_SW_Version;           /* scaling 1.0, offset 0.0, units none  */
  uint16_t D3_DateCode_MMDD;        /* scaling 1.0, offset 0.0, units none  */
  uint16_t D4_DateCode_YYYY;        /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x0ae_M174_Firmware_Info_t;

typedef PREPACK struct {
  int16_t D3_Diag_Data_1;    /* scaling 1.0, offset 0.0, units none  */
  int16_t D4_Diag_Data_2;    /* scaling 1.0, offset 0.0, units none  */
  int16_t D5_Diag_Data_3;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t D1_Buffer_Record;  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D2_Buffer_Segment; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x0af_M175_Diag_Data_t;

/* The command message is used to transmit data to the controller. This message
 * is sent from a user supplied external controller to the PMxxx controller. */
typedef PREPACK struct {
  /* Torque_Command: Torque command when in torque mode */
  /* scaling 0.1, offset 0.0, units Nm  */
  int16_t Torque_Command;
  /* Speed_Command: Speed commandused when in speed mode */
  /* scaling 1.0, offset 0.0, units rpm  */
  int16_t Speed_Command;
  /* Torque_Limit_Command: Torque Limit, set to 0 to keep default */
  /* scaling 0.1, offset 0.0, units Nm  */
  int16_t Torque_Limit_Command;
  /* Direction_Command: 0=CW, 1=CCW as veiwed from the shaft end of the motor */
  /* scaling 1.0, offset 0.0, units Bit  */
  uint8_t Direction_Command;
  /* Inverter_Enable: 0=Inverter OFF, 1 = Inverter ON */
  /* scaling 1.0, offset 0.0, units Bit  */
  uint8_t Inverter_Enable;
  /* Inverter_Discharge: 0=Discharge Disable,
=Discharge Enable */
  /* scaling 1.0, offset 0.0, units Bit  */
  uint8_t Inverter_Discharge;
  /* Speed_Mode_Enable: 0 = No change to mode, 1 = change to speed mode from
   * torque mode */
  /* scaling 1.0, offset 0.0, units Bit  */
  uint8_t Speed_Mode_Enable;
} POSTPACK can_0x0c0_M192_Command_Message_t;

/* To write a parameter use message 0x0C1 with byte #2 set to 1 (write).
To read a parameter use message 0x0C1 with byte #2 to set 0 (read).  */
typedef PREPACK struct {
  /* D1_Parameter_Address_Command: Valid EEPROM Parameter CAN addresses are
   * between 100 and 499. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D1_Parameter_Address_Command;
  /* D3_Data_Command: All EEPROM data is 16 bits and is contained in bytes 4
   * and 5. */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t D3_Data_Command;
  /* D2_Read_Write_Command: 0=Read, 1=Write */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D2_Read_Write_Command;
} POSTPACK can_0x0c1_M193_Read_Write_Param_Command_t;

/* To write a parameter use message 0x0C1 with byte #2 set to 1 (write).
To read a parameter use message 0x0C1 with byte #2 to set 0 (read).  */
typedef PREPACK struct {
  /* D1_Parameter_Address_Response: Valid EEPROM Parameter CAN addresses are
   * between 100 and 499. */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t D1_Parameter_Address_Response;
  /* D3_Data_Response: All EEPROM data is 16 bits and is contained in bytes 4
   * and 5. Bytes 6 and 7 should be ignored. */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t D3_Data_Response;
  /* D2_Write_Success: 0=Write failure, 1=Success */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t D2_Write_Success;
} POSTPACK can_0x0c2_M194_Read_Write_Param_Response_t;

/* Vehicle Control Unit Status message */
typedef PREPACK struct {
  /* VCU_DISTANCE_TRAVELLED: distance travelled in current driving session */
  /* scaling 1.0, offset 0.0, units meters  */
  uint16_t VCU_DISTANCE_TRAVELLED;
  /* VCU_MAX_TORQUE: max torque setting in Newton-meters */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_MAX_TORQUE;
  /* VCU_TORQUE_MODE: VCU torque mode setting  */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_TORQUE_MODE;
  /* VCU_STATEMACHINE_STATE: 0 = STARTUP, 1 = TS NOT ACTIVE, 2 = TS ACTIVE, 3 =
   * ENABLING INVERTER, 4 = WAIT RTD SOUND, 5=RTD */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_STATEMACHINE_STATE;
  /* VCU_IMD_OK_HIGH: IMD status, high = good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_IMD_OK_HIGH;
  /* VCU_SHUTDOWN_B_OK_HIGH: (UNUSED) Shutdown loop voltage at point D, high =
   * good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SHUTDOWN_B_OK_HIGH;
  /* VCU_BMS_OK_HIGH: BMS status, high = good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BMS_OK_HIGH;
  /* VCU_SHUTDOWN_C_OK_HIGH: (UNUSED) Shutdown loop voltage at point C, high =
   * good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SHUTDOWN_C_OK_HIGH;
  /* VCU_BSPD_OK_HIGH: BSPD status, high = good (latched) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BSPD_OK_HIGH;
  /* VCU_SHUTDOWN_D_OK_HIGH: (UNUSED) Shutdown loop voltage at point D, high =
   * good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SHUTDOWN_D_OK_HIGH;
  /* VCU_SOFTWARE_OK_HIGH: (UNUSED) VCU heartbeat status, high = good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SOFTWARE_OK_HIGH;
  /* VCU_SHUTDOWN_E_OK_HIGH: (UNUSED) Shutdown loop voltage at point E, high =
   * good */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SHUTDOWN_E_OK_HIGH;
  /* VCU_ACCEL_IMPLAUSIBLE: 1 if the accel pedal is implausible, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_ACCEL_IMPLAUSIBLE;
  /* VCU_BRAKE_IMPLAUSIBLE: 1 if the brake is implausible, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BRAKE_IMPLAUSIBLE;
  /* VCU_BRAKE_ACTIVE: 1 if the brake is active (above
   * 'vcu_brake_active_threshold') */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BRAKE_ACTIVE;
  /* VCU_BSPD_CURRENT_HIGH: 1 if the acc current is above the bspd trip
   * threshold */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BSPD_CURRENT_HIGH;
  /* VCU_BSPD_BRAKE_HIGH: 1 if the brake is above the bspd trip threshold */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_BSPD_BRAKE_HIGH;
  /* VCU_ACCEL_BRAKE_IMPLAUSIBLE: 1 if the accel and brake plausibility is
   * tripped */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_ACCEL_BRAKE_IMPLAUSIBLE;
  /* VCU_INVERTER_POWERED: 1 if the inverter is powered, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_INVERTER_POWERED;
  /* VCU_ENERGY_METER_PRESENT: 1 if the energy meter is present, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_ENERGY_METER_PRESENT;
  /* VCU_ACTIVATE_BUZZER: 1 if the buzzer is activated, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_ACTIVATE_BUZZER;
  /* VCU_SOFTWARE_OK: currently unused */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_SOFTWARE_OK;
  /* VCU_LAUNCH_CONTROL_ACTIVE: 1 if launch control is active, 0 if not */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t VCU_LAUNCH_CONTROL_ACTIVE;
} POSTPACK can_0x0c3_VCU_STATUS_t;

/* VCU analog pedal readings */
typedef PREPACK struct {
  /* APPS1: accelerator pedal sensor 1 voltage reading */
  /* scaling 0.0, offset 0.0, units volts  */
  uint16_t APPS1;
  /* APPS2: accelerator pedal sensor 2 voltage reading */
  /* scaling 0.0, offset 0.0, units volts  */
  uint16_t APPS2;
  /* BSE1: brake pedal travel sensor voltage */
  /* scaling 0.0, offset 0.0, units volts  */
  uint16_t BSE1;
  /* STEERING: steering angle sensor voltage */
  /* scaling 0.0, offset 0.0, units volts  */
  uint16_t STEERING;
} POSTPACK can_0x0c4_VCU_PEDAL_READINGS_t;

/* VCU wheel speed sensor readings */
typedef PREPACK struct {
  /* vcu_rpm_front_left: front left wheel speed sensor */
  /* scaling 1.0, offset 0.0, units rpm  */
  int16_t vcu_rpm_front_left;
  /* vcu_rpm_front_right: front right wheel speed sensor */
  /* scaling 1.0, offset 0.0, units rpm  */
  int16_t vcu_rpm_front_right;
} POSTPACK can_0x0c6_VCU_WHEELSPEED_READINGS_t;

typedef PREPACK struct {
  uint16_t vcu_apps2_start_threshold; /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps1_end_threshold;   /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_brake_active_threshold; /* scaling 1.0, offset 0.0, units none */
  uint16_t vcu_apps2_end_threshold;   /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps1_ov_threshold;    /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps1_uv_threshold;    /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps2_ov_threshold;    /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps2_uv_threshold;    /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_apps1_start_threshold; /* scaling 1.0, offset 0.0, units none  */
  /* vcu_pedals_settings_MUX: mux signal for VCU pedal threshold information
   * message */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t vcu_pedals_settings_MUX;
} POSTPACK can_0x0c7_vcu_pedal_threshold_settings_t;

/* information on the running vcu firmware and system on-timer */
typedef PREPACK struct {
  /* vcu_fw_version: short hash of the firmware on VCU  */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t vcu_fw_version;
  /* vcu_on_time_seconds: time in seconds which the VCU has been powered on and
   * running */
  /* scaling 1.0, offset 0.0, units seconds  */
  uint16_t vcu_on_time_seconds;
  /* vcu_project_on_main: if the compiled fw was from main branch (1) or not (0)
   */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t vcu_project_on_main;
  /* vcu_project_is_dirty: if the compiled fw had uncommitted changes (1) or not
   * (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t vcu_project_is_dirty;
} POSTPACK can_0x0c8_vcu_firmware_version_t;

/* VCU PCB health readings */
typedef PREPACK struct {
  /* VCU_GLV_CURRENT: VCU pcb current sense of the glv rail */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_GLV_CURRENT;
  /* VCU_GLV_VOLTAGE: VCU pcb voltage sense of glv rail */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_GLV_VOLTAGE;
  /* VCU_BSPD_VOLTAGE: VCU pcb voltage sense of the BSPD signal to close relay
   */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_BSPD_VOLTAGE;
  /* VCU_5V_VOLTAGE: VCU pcb voltage sense of the 5v rail */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_5V_VOLTAGE;
} POSTPACK can_0x0c9_VCU_BOARD_READINGS_ONE_t;

/* VCU PCB health readings */
typedef PREPACK struct {
  /* VCU_SDC_VOLTAGE: VCU pcb voltage sense of the shutdown circuit input */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_SDC_VOLTAGE;
  /* VCU_SDC_CURRENT: VCU PCB current sense of shutdown circuit */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_SDC_CURRENT;
  /* VCU_AIN9_VOLTAGE: VCU pcb non specific analog channel */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_AIN9_VOLTAGE;
  /* VCU_AIN10_VOLTAGE: VCU pcb non specific analog channel */
  /* scaling 1.0, offset 0.0, units bits  */
  uint16_t VCU_AIN10_VOLTAGE;
} POSTPACK can_0x0ca_VCU_BOARD_READINGS_TWO_t;

/* vcu launchController system status */
typedef PREPACK struct {
  /* vcu_launchcontrol_elapsed_time: time that the launch controller has been
   * executing, in miliiseconds */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t vcu_launchcontrol_elapsed_time;
  /* vcu_launchcontrol_outputtorqueco: launch controller torque output */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t vcu_launchcontrol_outputtorqueco;
  uint8_t vcu_launchcontrol_state; /* scaling 1.0, offset 0.0, units none  */
  uint8_t vcu_launchcontrol_type;  /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x0cb_vcu_launchcontrol_diagdata_t;

/* the calculated pedal travels */
typedef PREPACK struct {
  /* vcu_apps1_travel: 0 to 100% - a negative value = implaus */
  /* scaling 0.1, offset 0.0, units none  */
  int16_t vcu_apps1_travel;
  /* vcu_apps2_travel: 0 to 100% - a negative value = implaus */
  /* scaling 0.1, offset 0.0, units none  */
  int16_t vcu_apps2_travel;
  /* vcu_bse1_travel: 0 to 100% - a negative value = implaus */
  /* scaling 0.1, offset 0.0, units none  */
  int16_t vcu_bse1_travel;
} POSTPACK can_0x0cc_vcu_pedals_travel_t;

/* Countdown until the VCU will start launch when in launch mode */
typedef PREPACK struct {
  uint32_t vcu_launchcontrol_release_countd; /* scaling 1.0, offset 0.0, units
                                                milliseconds  */
  uint32_t vcu_release_delay; /* scaling 1.0, offset 0.0, units milliseconds  */
} POSTPACK can_0x0cd_vcu_launchcontrol_countdown_t;

/* distance tracking data using motor as speed */
typedef PREPACK struct {
  uint16_t vcu_motor_energy_wh; /* scaling 0.1, offset 0.0, units watt-hours  */
  uint16_t vcu_motor_efficiency_instantaneo; /* scaling 0.0, offset 0.0, units
                                                none  */
  uint16_t vcu_motor_distance_meters; /* scaling 1.0, offset 0.0, units none  */
  uint16_t vcu_motor_efficiency_kmkwh; /* scaling 0.0, offset 0.0, units none */
} POSTPACK can_0x0ce_vcu_distance_tracker_motor_t;

/* distance tracking data using wheelspeed as speed */
typedef PREPACK struct {
  uint16_t
      vcu_wheelspeed_energy_wh; /* scaling 0.1, offset 0.0, units watt-hours  */
  uint16_t vcu_wheelspeed_efficiency_instan; /* scaling 0.0, offset 0.0, units
                                                none  */
  uint16_t
      vcu_wheelspeed_distance_meters; /* scaling 1.0, offset 0.0, units none  */
  uint16_t
      vcu_wheelspeed_efficiency_kmkwh; /* scaling 0.0, offset 0.0, units none */
} POSTPACK can_0x0cf_vcu_distance_tracker_wheelspeed_t;

/* The total ontime of the vcu and distance */
typedef PREPACK struct {
  uint32_t vcu_lifetime_ontime;   /* scaling 1.0, offset 0.0, units seconds  */
  uint32_t vcu_lifetime_distance; /* scaling 1.0, offset 0.0, units meters  */
} POSTPACK can_0x0d0_vcu_lifetime_distance_and_ontime_t;

/* vcu tractionController system status */
typedef PREPACK struct {
  /* vcu_tractioncontrol_elapsed_time: time that the traction controller has
   * been executing, in miliiseconds */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t vcu_tractioncontrol_elapsed_time;
  /* vcu_tractioncontrol_outputtorque: traction controller torque output */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t vcu_tractioncontrol_outputtorque;
  uint8_t vcu_tractioncontrol_state; /* scaling 1.0, offset 0.0, units none  */
  uint8_t vcu_tractioncontrol_type;  /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x0d1_vcu_tractioncontrol_diagdata_t;

/* distance tracking data using vectornav velocity measurement as speed */
typedef PREPACK struct {
  uint16_t
      vcu_vectornav_energy_wh; /* scaling 0.1, offset 0.0, units watt-hours  */
  uint16_t vcu_vectornav_efficiency_instant; /* scaling 0.0, offset 0.0, units
                                                none  */
  uint16_t
      vcu_vectornav_distance_meters; /* scaling 1.0, offset 0.0, units none  */
  uint16_t
      vcu_vectornav_efficiency_kmkwh; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x0d2_vcu_distance_tracker_vectornav_t;

/* vcu amp-hour counters */
typedef PREPACK struct {
  uint16_t vcu_wsfl_ah;  /* scaling 0.0, offset 0.0, units none  */
  uint16_t vcu_motor_ah; /* scaling 0.0, offset 0.0, units none  */
  uint16_t vcu_vnav_ah;  /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x0d3_vcu_coulomb_counters_t;

/* vcu wheel speed and slip info for tc and lc */
typedef PREPACK struct {
  uint16_t vcu_front_rpm_avg;   /* scaling 0.1, offset 0.0, units none  */
  uint16_t vcu_rear_rpm_avg;    /* scaling 0.1, offset 0.0, units none  */
  uint16_t vcu_calculated_slip; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x0d4_vcu_calculated_slip_t;

/* Send to VCU to set the max power limit */
typedef PREPACK struct {
  /* vcu_power_limit: Send to VCU to set the max power limit */
  /* scaling 1.0, offset 0.0, units watts  */
  uint32_t vcu_power_limit;
} POSTPACK can_0x0d5_vcu_power_limit_update_t;

/* status of buttons on the dash */
typedef PREPACK struct {
  /* dash_button1status: status of button1 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button1status;
  /* dash_button2status: status of button2 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button2status;
  /* dash_button3status: status of button3 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button3status;
  /* dash_button4status: status of button4 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button4status;
  /* dash_button5status: status of button5 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button5status;
  /* dash_button6status: status of button6 on dash (1 = pressed) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_button6status;
} POSTPACK can_0x0eb_dash_buttons_t;

/* information on the running dash firmware and system on-timer */
typedef PREPACK struct {
  /* dash_fw_version: short hash of the firmware on dash  */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t dash_fw_version;
  /* dash_on_time_seconds: time in seconds which the dash has been powered on
   * and running */
  /* scaling 1.0, offset 0.0, units seconds  */
  uint16_t dash_on_time_seconds;
  /* dash_project_on_main: if the compiled dash fw was from main branch (1) or
   * not (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_project_on_main;
  /* dash_project_is_dirty: if the compiled dash fw had uncommitted changes (1)
   * or not (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t dash_project_is_dirty;
} POSTPACK can_0x0ec_dash_firmware_version_t;

typedef PREPACK struct {
  uint8_t D3_HV_Input_Current;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t D6_14V_Monitor;         /* scaling 1.0, offset 0.0, units none  */
  uint8_t D8_14V_Current_Monitor; /* scaling 1.0, offset 0.0, units none  */
  uint8_t D5_DTC_Index;           /* scaling 1.0, offset 0.0, units none  */
  uint8_t D4_DTC_Status;          /* scaling 1.0, offset 0.0, units none  */
  uint8_t D1_HV_Input_Current_Sensor_Valid; /* scaling 1.0, offset 0.0, units
                                               none  */
  uint8_t D2_14V_Master_Fault; /* scaling 1.0, offset 0.0, units none  */
  uint8_t D7_14V_Conditional;  /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x1d5_M188_U2C_Message_Rxd_t;

typedef PREPACK struct {
  uint8_t D1_ID_Byte;       /* scaling 1.0, offset 0.0, units none  */
  uint8_t D2_Setpoint_Calc; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x1d7_M187_U2C_Command_Txd_t;

/* vectornav breakout realtime */
typedef PREPACK struct {
  uint64_t evelogger_vectornav_time; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x1f4_evelogger_vectornav_time_t;

/* vectornav attitude readings */
typedef PREPACK struct {
  int16_t evelogger_vectornav_yaw;   /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_roll;  /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_pitch; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x1f5_evelogger_vectornav_attitude_t;

/* vectornav gyro readings */
typedef PREPACK struct {
  int16_t evelogger_vectornav_W_x; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_W_y; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_W_z; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x1f6_evelogger_vectornav_gyro_t;

/* vectornav position */
typedef PREPACK struct {
  int32_t
      evelogger_vectornav_latitude; /* scaling 0.0, offset 0.0, units none  */
  int32_t
      evelogger_vectornav_longitude; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x1f7_evelogger_vectornav_position_t;

/* vectornav velocity readings */
typedef PREPACK struct {
  int16_t evelogger_vectornav_v_n; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_v_e; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_v_d; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x1f8_evelogger_vectornav_velocity_t;

/* vectornav accelerometer readings */
typedef PREPACK struct {
  int16_t evelogger_vectornav_accelX; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_accelY; /* scaling 0.0, offset 0.0, units none  */
  int16_t evelogger_vectornav_accelZ; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x1f9_evelogger_vectornav_acceleration_t;

/* Sent by BMS */
typedef PREPACK struct {
  /* D1_Max_Discharge_Current: Maximum discharge current from BMS */
  /* scaling 1.0, offset 0.0, units A  */
  uint16_t D1_Max_Discharge_Current;
  /* D2_Max_Charge_Current: Maximum charge current from BMS */
  /* scaling 1.0, offset 0.0, units A  */
  uint16_t D2_Max_Charge_Current;
} POSTPACK can_0x202_BMS_Current_Limit_t;

/* information on IMD and BMS shutdown circuit relays, as well as IMD diagnostic
 * info */
typedef PREPACK struct {
  /* acu_imd_pwm_frequency: PWM frequency of the IMD: 10hz on normal operation
   */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_imd_pwm_frequency;
  /* acu_imd_pwm_duty: duty cycle of IMD: ~5% on normal conditions */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_imd_pwm_duty;
  /* acu_imd_relay_state: Status of the IMD relay as sensed by the ACU: 1 is
   * closed, 0 is open */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_imd_relay_state;
  /* acu_bms_relay_state: Status of the BMS relay as sensed by the ACU: 1 is
   * closed, 0 is open */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_bms_relay_state;
  /* acu_imd_gpio_state: Status of the IMD OKHS output: 1 is OK, 0 is FAULTED */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_imd_gpio_state;
  /* acu_bms_gpio_state: Status of the BMS ENABLE output: 1 is OK, 0 is FAULTED
   */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_bms_gpio_state;
} POSTPACK can_0x258_acu_shutdown_status_t;

/* ACU voltage measurements */
typedef PREPACK struct {
  /* acu_glv_voltage: ACU GLV system voltage reading */
  /* scaling 0.0, offset 0.0, units none  */
  uint8_t acu_glv_voltage;
  /* acu_sdc_voltage: ACU shutdown circuit voltage reading */
  /* scaling 0.0, offset 0.0, units none  */
  uint8_t acu_sdc_voltage;
  /* acu_5v_voltage: ACU voltage reading */
  /* scaling 0.0, offset 0.0, units none  */
  uint8_t acu_5v_voltage;
} POSTPACK can_0x259_acu_board_voltage_readings_t;

/* information on the running acu firmware and system on-timer */
typedef PREPACK struct {
  /* acu_fw_version: short hash of the firmware on ACU */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t acu_fw_version;
  /* acu_on_time_seconds: time in seconds which the acu has been powered on and
   * running */
  /* scaling 1.0, offset 0.0, units seconds  */
  uint16_t acu_on_time_seconds;
  /* acu_project_on_main: if the compiled acu fw was from main branch (1) or not
   * (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_project_on_main;
  /* acu_project_is_dirty: if the compiled acu fw had uncommitted changes (1) or
   * not (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t acu_project_is_dirty;
} POSTPACK can_0x25a_acu_firmware_version_t;

/* front left corner node shockpot data */
typedef PREPACK struct {
  uint16_t cornernode_fl_shockpot; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x384_cornernode_fl_shockpot_t;

/* front right corner node shockpot data */
typedef PREPACK struct {
  uint16_t cornernode_fr_shockpot; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x385_cornernode_fr_shockpot_t;

/* rear left corner node shockpot data */
typedef PREPACK struct {
  uint16_t cornernode_rl_shockpot; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x386_cornernode_rl_shockpot_t;

/* rear right corner node shockpot data */
typedef PREPACK struct {
  uint16_t cornernode_rr_shockpot; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x387_cornernode_rr_shockpot_t;

/* front left corner node wheelspeed data */
typedef PREPACK struct {
  uint16_t cornernode_fl_wheelspeed; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x388_cornernode_fl_wheelspeed_t;

/* front right corner node wheelspeed data */
typedef PREPACK struct {
  uint16_t cornernode_fr_wheelspeed; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x389_cornernode_fr_wheelspeed_t;

/* rear left corner node wheelspeed data */
typedef PREPACK struct {
  uint16_t cornernode_rl_wheelspeed; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38a_cornernode_rl_wheelspeed_t;

/* rear right corner node wheelspeed data */
typedef PREPACK struct {
  uint16_t cornernode_rr_wheelspeed; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38b_cornernode_rr_wheelspeed_t;

/* front left corner node tiretemp data */
typedef PREPACK struct {
  uint64_t cornernode_fl_tiretemp; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38c_cornernode_fl_tiretemp_t;

/* front right corner node tiretemp data */
typedef PREPACK struct {
  uint64_t cornernode_fr_tiretemp; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38d_cornernode_fr_tiretemp_t;

/* rear left corner node tiretemp data */
typedef PREPACK struct {
  uint64_t cornernode_rl_tiretemp; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38e_cornernode_rl_tiretemp_t;

/* rear right corner node tiretemp data */
typedef PREPACK struct {
  uint64_t cornernode_rr_tiretemp; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x38f_cornernode_rr_tiretemp_t;

/* front brakepressure data */
typedef PREPACK struct {
  uint16_t
      cornernode_front_brakepressure; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x390_cornernode_front_brakepressure_t;

/* front right corner node brakepressure data */
typedef PREPACK struct {
  uint16_t
      cornernode_rear_brakepressure; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x391_cornernode_rear_brakepressure_t;

/* information on the running omni firmware and system on-timer */
typedef PREPACK struct {
  /* omni_fw_version: short hash of the firmware on omni  */
  /* scaling 1.0, offset 0.0, units none  */
  uint32_t omni_fw_version;
  /* omni_on_time_seconds: time in seconds which the omni has been powered on
   * and running */
  /* scaling 1.0, offset 0.0, units seconds  */
  uint16_t omni_on_time_seconds;
  /* omni_project_on_main: if the compiled omni fw was from main branch (1),
   * testing (2) or neither (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t omni_project_on_main;
  /* omni_project_is_dirty: if the compiled omni fw had uncommitted changes (1)
   * or not (0) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t omni_project_is_dirty;
} POSTPACK can_0x44c_omni_status_t;

/* LSM9DS1 accelerometer readings */
typedef PREPACK struct {
  int16_t omni_accel_x; /* scaling 0.0, offset 0.0, units none  */
  int16_t omni_accel_y; /* scaling 0.0, offset 0.0, units none  */
  int16_t omni_accel_z; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x44d_omni_accel_data_t;

/* LSM9DS1 gyro readings */
typedef PREPACK struct {
  int16_t omni_gyro_x; /* scaling 0.1, offset 0.0, units none  */
  int16_t omni_gyro_y; /* scaling 0.1, offset 0.0, units none  */
  int16_t omni_gyro_z; /* scaling 0.1, offset 0.0, units none  */
} POSTPACK can_0x44e_omni_gyro_data_t;

/* LSM9DS1 heading readings, calculated with magnetometer and accel */
typedef PREPACK struct {
  int16_t omni_heading; /* scaling 0.0, offset 0.0, units none  */
  int16_t omni_pitch;   /* scaling 0.0, offset 0.0, units none  */
  int16_t omni_roll;    /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x44f_omni_heading_data_t;

/* raw shock pot readings with teensy 12bit adc, assume 3v3 ref */
typedef PREPACK struct {
  /* omni_shockpot_fl: omni fl shockpot reading, adc bits */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t omni_shockpot_fl;
  /* omni_shockpot_fr: omni fr shockpot reading, adc bits */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t omni_shockpot_fr;
  /* omni_shockpot_rl: omni rl shockpot reading, adc bits */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t omni_shockpot_rl;
  /* omni_shockpot_rr: omni rr shockpot reading, adc bits */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t omni_shockpot_rr;
} POSTPACK can_0x450_omni_shockpot_data_t;

/* raw steering angle sensor reading with teensy 12bit adc, assume 3v3 ref */
typedef PREPACK struct {
  /* omni_steering: omni steering angle sensor reading, adc bits */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t omni_steering;
} POSTPACK can_0x451_omni_steering_data_t;

/* adafruit gps coordinates */
typedef PREPACK struct {
  int32_t omni_gps_latitude;  /* scaling 0.0, offset 0.0, units none  */
  int32_t omni_gps_longitude; /* scaling 0.0, offset 0.0, units none  */
} POSTPACK can_0x452_omni_gps_position_t;

typedef PREPACK struct {
  /* seconds: Seconds ECU has been on */
  /* scaling 1.0, offset 0.0, units s  */
  uint16_t seconds;
  /* pw1: Main pulsewidth bank 1 */
  /* scaling 0.0, offset 0.0, units ms  */
  uint16_t pw1;
  /* pw2: Main pulsewidth bank 2 */
  /* scaling 0.0, offset 0.0, units ms  */
  uint16_t pw2;
  /* rpm: Engine RPM */
  /* scaling 1.0, offset 0.0, units RPM  */
  uint16_t rpm;
} POSTPACK can_0x5f0_megasquirt_gp0_t;

typedef PREPACK struct {
  /* adv_deg: Final ignition spark advance */
  /* scaling 0.1, offset 0.0, units deg BTDC  */
  int16_t adv_deg;
  /* squirt: Bitfield of batch fire injector events */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t squirt;
  /* engine: Bitfield of engine status */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t engine;
  /* afrtgt1: Bank 1 AFR target */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t afrtgt1;
  /* afrtgt2: Bank 2 AFR target */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t afrtgt2;
  uint8_t wbo2_en1; /* scaling 1.0, offset 0.0, units none  */
  uint8_t wbo2_en2; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x5f1_megasquirt_gp1_t;

typedef PREPACK struct {
  /* baro: Barometric pressure */
  /* scaling 0.1, offset 0.0, units kPa  */
  int16_t baro;
  /* map: Manifold air pressure */
  /* scaling 0.1, offset 0.0, units kPa  */
  int16_t map;
  /* mat: Manifold air temperature */
  /* scaling 0.1, offset 0.0, units deg F  */
  int16_t mat;
  /* clt: Coolant temperature */
  /* scaling 0.1, offset 0.0, units deg F  */
  int16_t clt;
} POSTPACK can_0x5f2_megasquirt_gp2_t;

typedef PREPACK struct {
  /* tps: Throttle position */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t tps;
  /* batt: Battery voltage */
  /* scaling 0.1, offset 0.0, units V  */
  int16_t batt;
  int16_t afr1_old; /* scaling 0.1, offset 0.0, units AFR  */
  int16_t afr2_old; /* scaling 0.1, offset 0.0, units AFR  */
} POSTPACK can_0x5f3_megasquirt_gp3_t;

typedef PREPACK struct {
  /* knock: Indication of knock input */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t knock;
  /* egocor1: EGO bank 1 correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t egocor1;
  /* egocor2: EGO bank 2 correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t egocor2;
  /* aircor: Air density correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t aircor;
} POSTPACK can_0x5f4_megasquirt_gp4_t;

typedef PREPACK struct {
  /* warmcor: Warmup correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t warmcor;
  /* tpsaccel: TPS-based acceleration */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t tpsaccel;
  /* tpsfuelcut: TPS-based fuel cut */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t tpsfuelcut;
  /* barocor: Barometric fuel correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t barocor;
} POSTPACK can_0x5f5_megasquirt_gp5_t;

typedef PREPACK struct {
  /* totalcor: Total fuel correction */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t totalcor;
  /* ve1: VE table/bank 1 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t ve1;
  /* ve2: VE table/bank 2 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t ve2;
  /* iacstep: Stepper idle step number */
  /* scaling 1.0, offset 0.0, units step  */
  int16_t iacstep;
} POSTPACK can_0x5f6_megasquirt_gp6_t;

typedef PREPACK struct {
  /* cold_adv_deg: Cold advance */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t cold_adv_deg;
  /* TPSdot: Rate of change of TPS */
  /* scaling 0.1, offset 0.0, units %/s  */
  int16_t TPSdot;
  /* MAPdot: Rate of change of MAP */
  /* scaling 1.0, offset 0.0, units kPa/s  */
  int16_t MAPdot;
  /* RPMdot: Rate of change of RPM */
  /* scaling 10.0, offset 0.0, units RPM/s  */
  int16_t RPMdot;
} POSTPACK can_0x5f7_megasquirt_gp7_t;

typedef PREPACK struct {
  /* MAFload: Synthetic 'load' from MAF */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t MAFload;
  /* fuelload: 'Load' used for fuel table lookup */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t fuelload;
  /* fuelcor: Adjustment to fuel from Flex */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t fuelcor;
  /* MAF: Mass air flow */
  /* scaling 0.0, offset 0.0, units g/s  */
  int16_t MAF;
} POSTPACK can_0x5f8_megasquirt_gp8_t;

typedef PREPACK struct {
  int16_t egoV1; /* scaling 0.0, offset 0.0, units V  */
  int16_t egoV2; /* scaling 0.0, offset 0.0, units V  */
  /* dwell: Main ignition dwell */
  /* scaling 0.1, offset 0.0, units ms  */
  uint16_t dwell;
  /* dwell_trl: Trailing ignition dwell */
  /* scaling 0.1, offset 0.0, units ms  */
  uint16_t dwell_trl;
} POSTPACK can_0x5f9_megasquirt_gp9_t;

typedef PREPACK struct {
  int16_t status5; /* scaling 1.0, offset 0.0, units none  */
  /* status1: ECU status bitfield 1 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status1;
  /* status2: ECU status bitfield 2 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status2;
  /* status3: ECU status bitfield 3 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status3;
  uint8_t status4; /* scaling 1.0, offset 0.0, units none  */
  /* status6: ECU status bitfield 6 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status6;
  /* status7: ECU status bitfield 7 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status7;
} POSTPACK can_0x5fa_megasquirt_gp10_t;

typedef PREPACK struct {
  /* fuelload2: 'Load' used for modifier fuel table lookup */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t fuelload2;
  /* ignload: 'Load' used for ignition table lookup */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t ignload;
  /* ignload2: 'Load' used for modifier ignition table lookup */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t ignload2;
  /* airtemp: Estimated intake air temperature */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t airtemp;
} POSTPACK can_0x5fb_megasquirt_gp11_t;

typedef PREPACK struct {
  /* wallfuel1: Calculated volume of fuel on intake walls from EAE - channel 1
   */
  /* scaling 0.0, offset 0.0, units us  */
  int32_t wallfuel1;
  /* wallfuel2: Calculated volume of fuel on intake walls from EAE - channel 2
   */
  /* scaling 0.0, offset 0.0, units us  */
  int32_t wallfuel2;
} POSTPACK can_0x5fc_megasquirt_gp12_t;

typedef PREPACK struct {
  /* sensors1: Generic sensor input 1 (gpioadc0 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors1;
  /* sensors2: Generic sensor input 2 (gpioadc1 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors2;
  /* sensors3: Generic sensor input 3 (gpioadc2 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors3;
  /* sensors4: Generic sensor input 4 (gpioadc3 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors4;
} POSTPACK can_0x5fd_megasquirt_gp13_t;

typedef PREPACK struct {
  /* sensors5: Generic sensor input 5 (gpioadc4 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors5;
  /* sensors6: Generic sensor input 6 (gpioadc5 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors6;
  /* sensors7: Generic sensor input 7 (gpioadc6 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors7;
  /* sensors8: Generic sensor input 8 (gpioadc7 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors8;
} POSTPACK can_0x5fe_megasquirt_gp14_t;

typedef PREPACK struct {
  /* sensors9: Generic sensor input 19 (adc6 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors9;
  /* sensors10: Generic sensor input 10 (adc7 on MS2) */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors10;
  /* sensors11: Generic sensor input 11 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors11;
  /* sensors12: Generic sensor input 12 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors12;
} POSTPACK can_0x5ff_megasquirt_gp15_t;

typedef PREPACK struct {
  /* sensors13: Generic sensor input 13 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors13;
  /* sensors14: Generic sensor input 14 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors14;
  /* sensors15: Generic sensor input 15 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors15;
  /* sensors16: Generic sensor input 16 */
  /* scaling 0.0, offset 0.0, units none  */
  int16_t sensors16;
} POSTPACK can_0x600_megasquirt_gp16_t;

typedef PREPACK struct {
  /* boost_targ_1: Target boost - channel 1 */
  /* scaling 0.1, offset 0.0, units kPa  */
  uint16_t boost_targ_1;
  /* boost_targ_2: Target boost - channel 2 */
  /* scaling 0.1, offset 0.0, units kPa  */
  uint16_t boost_targ_2;
  /* maf_volts: MAF voltage */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t maf_volts;
  /* boostduty: Duty cycle on boost solenoid 1 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t boostduty;
  /* boostduty2: Duty cycle on boost solenoid 2 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t boostduty2;
} POSTPACK can_0x601_megasquirt_gp17_t;

typedef PREPACK struct {
  /* pwseq1: Sequential pulsewidth for cyl #1 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq1;
  /* pwseq2: Sequential pulsewidth for cyl #2 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq2;
  /* pwseq3: Sequential pulsewidth for cyl #3 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq3;
  /* pwseq4: Sequential pulsewidth for cyl #4 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq4;
} POSTPACK can_0x602_megasquirt_gp18_t;

typedef PREPACK struct {
  /* pwseq5: Sequential pulsewidth for cyl #5 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq5;
  /* pwseq6: Sequential pulsewidth for cyl #6 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq6;
  /* pwseq7: Sequential pulsewidth for cyl #7 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq7;
  /* pwseq8: Sequential pulsewidth for cyl #8 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq8;
} POSTPACK can_0x603_megasquirt_gp19_t;

typedef PREPACK struct {
  /* pwseq9: Sequential pulsewidth for cyl #9 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq9;
  /* pwseq10: Sequential pulsewidth for cyl #10 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq10;
  /* pwseq11: Sequential pulsewidth for cyl #11 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq11;
  /* pwseq12: Sequential pulsewidth for cyl #12 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq12;
} POSTPACK can_0x604_megasquirt_gp20_t;

typedef PREPACK struct {
  /* pwseq13: Sequential pulsewidth for cyl #13 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq13;
  /* pwseq14: Sequential pulsewidth for cyl #14 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq14;
  /* pwseq15: Sequential pulsewidth for cyl #15 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq15;
  /* pwseq16: Sequential pulsewidth for cyl #16 */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t pwseq16;
} POSTPACK can_0x605_megasquirt_gp21_t;

typedef PREPACK struct {
  /* egt1: EGT cyl #1 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt1;
  /* egt2: EGT cyl #2 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt2;
  /* egt3: EGT cyl #3 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt3;
  /* egt4: EGT cyl #4 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt4;
} POSTPACK can_0x606_megasquirt_gp22_t;

typedef PREPACK struct {
  /* egt5: EGT cyl #5 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt5;
  /* egt6: EGT cyl #6 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt6;
  /* egt7: EGT cyl #7 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt7;
  /* egt8: EGT cyl #8 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt8;
} POSTPACK can_0x607_megasquirt_gp23_t;

typedef PREPACK struct {
  /* egt9: EGT cyl #9 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt9;
  /* egt10: EGT cyl #10 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt10;
  /* egt11: EGT cyl #11 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt11;
  /* egt12: EGT cyl #12 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt12;
} POSTPACK can_0x608_megasquirt_gp24_t;

typedef PREPACK struct {
  /* egt13: EGT cyl #13 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt13;
  /* egt14: EGT cyl #14 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt14;
  /* egt15: EGT cyl #15 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt15;
  /* egt16: EGT cyl #16 */
  /* scaling 0.1, offset 0.0, units degF  */
  int16_t egt16;
} POSTPACK can_0x609_megasquirt_gp25_t;

typedef PREPACK struct {
  /* nitrous_timer_out: Timer used internally for nitrous system */
  /* scaling 0.0, offset 0.0, units s  */
  uint16_t nitrous_timer_out;
  /* n2o_addfuel: Fuel pulsewidth added due to nitrous system */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t n2o_addfuel;
  /* n2o_retard: Timing retard due to nitrous system */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t n2o_retard;
  /* nitrous1_duty: Duty cycle to nitrous solenoid 1 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t nitrous1_duty;
  /* nitrous2_duty: Duty cycle to nitrous solenoid 2 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t nitrous2_duty;
} POSTPACK can_0x60a_megasquirt_gp26_t;

typedef PREPACK struct {
  /* canpwmin1: PWM period 1 from remote board */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t canpwmin1;
  /* canpwmin2: PWM period 2 from remote board */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t canpwmin2;
  /* canpwmin3: PWM period 3 from remote board */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t canpwmin3;
  /* canpwmin4: PWM period 4 from remote board */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t canpwmin4;
} POSTPACK can_0x60b_megasquirt_gp27_t;

typedef PREPACK struct {
  /* cl_idle_targ_rpm: Closed-loop idle target RPM */
  /* scaling 1.0, offset 0.0, units RPM  */
  uint16_t cl_idle_targ_rpm;
  /* tpsadc: ADC count from TPS */
  /* scaling 1.0, offset 0.0, units none  */
  int16_t tpsadc;
  /* eaeload: 'Load' used for EAE calc */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t eaeload;
  /* afrload: 'Load' used for AFR table lookups */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t afrload;
} POSTPACK can_0x60c_megasquirt_gp28_t;

typedef PREPACK struct {
  /* EAEfcor1: Fuel correction from EAE - channel 1 */
  /* scaling 0.1, offset 0.0, units %  */
  uint16_t EAEfcor1;
  /* EAEfcor2: Fuel correction from EAE - channel 2 */
  /* scaling 0.1, offset 0.0, units %  */
  uint16_t EAEfcor2;
  /* VSS1dot: Rate of change of VSS1 */
  /* scaling 0.1, offset 0.0, units m/s^2  */
  int16_t VSS1dot;
  /* VSS2dot: Rate of change of VSS2 */
  /* scaling 0.1, offset 0.0, units m/s^2  */
  int16_t VSS2dot;
} POSTPACK can_0x60d_megasquirt_gp29_t;

typedef PREPACK struct {
  /* accelx: External accelerometer X */
  /* scaling 0.0, offset 0.0, units m/s^2  */
  int16_t accelx;
  /* accely: External accelerometer Y */
  /* scaling 0.0, offset 0.0, units m/s^2  */
  int16_t accely;
  /* accelz: External accelerometer Z */
  /* scaling 0.0, offset 0.0, units m/s^2  */
  int16_t accelz;
  /* stream_level: Volume level on audio input */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t stream_level;
  /* water_duty: Duty cycle to water injection solenoid */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t water_duty;
} POSTPACK can_0x60e_megasquirt_gp30_t;

typedef PREPACK struct {
  /* AFR1: AFR cyl #1 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR1;
  /* AFR2: AFR cyl #2 */
  /* scaling 0.1, offset 0.0, units none  */
  uint8_t AFR2;
  /* AFR3: AFR cyl #3 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR3;
  /* AFR4: AFR cyl #4 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR4;
  /* AFR5: AFR cyl #5 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR5;
  /* AFR6: AFR cyl #6 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR6;
  /* AFR7: AFR cyl #7 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR7;
  /* AFR8: AFR cyl #8 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR8;
} POSTPACK can_0x60f_megasquirt_gp31_t;

typedef PREPACK struct {
  /* AFR9: AFR cyl #9 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR9;
  /* AFR10: AFR cyl #10 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR10;
  /* AFR11: AFR cyl #11 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR11;
  /* AFR12: AFR cyl #12 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR12;
  /* AFR13: AFR cyl #13 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR13;
  /* AFR14: AFR cyl #14 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR14;
  /* AFR15: AFR cyl #15 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR15;
  /* AFR16: AFR cyl #16 */
  /* scaling 0.1, offset 0.0, units AFR  */
  uint8_t AFR16;
} POSTPACK can_0x610_megasquirt_gp32_t;

typedef PREPACK struct {
  /* duty_pwm1: Generic PWM duty 1 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm1;
  /* duty_pwm2: Generic PWM duty 2 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm2;
  /* duty_pwm3: Generic PWM duty 3 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm3;
  /* duty_pwm4: Generic PWM duty 4 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm4;
  /* duty_pwm5: Generic PWM duty 5 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm5;
  /* duty_pwm6: Generic PWM duty 6 */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t duty_pwm6;
  /* gear: Current gear selected */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t gear;
  /* status8: ECU status bitfield 8 */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t status8;
} POSTPACK can_0x611_megasquirt_gp33_t;

typedef PREPACK struct {
  /* EGOv1: Voltage from O2 cyl #1 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv1;
  /* EGOv2: Voltage from O2 cyl #2 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv2;
  /* EGOv3: Voltage from O2 cyl #3 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv3;
  /* EGOv4: Voltage from O2 cyl #4 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv4;
} POSTPACK can_0x612_megasquirt_gp34_t;

typedef PREPACK struct {
  /* EGOv5: Voltage from O2 cyl #5 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv5;
  /* EGOv6: Voltage from O2 cyl #6 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv6;
  /* EGOv7: Voltage from O2 cyl #7 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv7;
  /* EGOv8: Voltage from O2 cyl #8 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv8;
} POSTPACK can_0x613_megasquirt_gp35_t;

typedef PREPACK struct {
  /* EGOv9: Voltage from O2 cyl #9 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv9;
  /* EGOv10: Voltage from O2 cyl #10 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv10;
  /* EGOv11: Voltage from O2 cyl #11 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv11;
  /* EGOv12: Voltage from O2 cyl #12 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv12;
} POSTPACK can_0x614_megasquirt_gp36_t;

typedef PREPACK struct {
  /* EGOv13: Voltage from O2 cyl #13 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv13;
  /* EGOv14: Voltage from O2 cyl #14 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv14;
  /* EGOv15: Voltage from O2 cyl #15 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv15;
  /* EGOv16: Voltage from O2 cyl #16 */
  /* scaling 0.0, offset 0.0, units V  */
  int16_t EGOv16;
} POSTPACK can_0x615_megasquirt_gp37_t;

typedef PREPACK struct {
  /* EGOcor1: EGO correction cyl#1 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor1;
  /* EGOcor2: EGO correction cyl#2 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor2;
  /* EGOcor3: EGO correction cyl#3 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor3;
  /* EGOcor4: EGO correction cyl#4 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor4;
} POSTPACK can_0x616_megasquirt_gp38_t;

typedef PREPACK struct {
  /* EGOcor5: EGO correction cyl#5 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor5;
  /* EGOcor6: EGO correction cyl#6 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor6;
  /* EGOcor7: EGO correction cyl#7 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor7;
  /* EGOcor8: EGO correction cyl#8 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor8;
} POSTPACK can_0x617_megasquirt_gp39_t;

typedef PREPACK struct {
  /* EGOcor9: EGO correction cyl#9 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor9;
  /* EGOcor10: EGO correction cyl#10 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor10;
  /* EGOcor11: EGO correction cyl#11 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor11;
  /* EGOcor12: EGO correction cyl#12 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor12;
} POSTPACK can_0x618_megasquirt_gp40_t;

typedef PREPACK struct {
  /* EGOcor13: EGO correction cyl#13 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor13;
  /* EGOcor14: EGO correction cyl#14 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor14;
  /* EGOcor15: EGO correction cyl#15 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor15;
  /* EGOcor16: EGO correction cyl#16 */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t EGOcor16;
} POSTPACK can_0x619_megasquirt_gp41_t;

typedef PREPACK struct {
  /* VSS1: Vehicle speed 1 */
  /* scaling 0.1, offset 0.0, units m/s  */
  uint16_t VSS1;
  /* VSS2: Vehicle speed 2 */
  /* scaling 0.1, offset 0.0, units m/s  */
  uint16_t VSS2;
  /* VSS3: Vehicle speed 3 */
  /* scaling 0.1, offset 0.0, units m/s  */
  uint16_t VSS3;
  /* VSS4: Vehicle speed 4 */
  /* scaling 0.1, offset 0.0, units m/s  */
  uint16_t VSS4;
} POSTPACK can_0x61a_megasquirt_gp42_t;

typedef PREPACK struct {
  /* sd_filenum: SDcard file number */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t sd_filenum;
  /* synccnt: Sync-loss counter */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t synccnt;
  /* syncreason: Sync-loss reason code */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t syncreason;
  /* sd_error: SDcard error number */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t sd_error;
  /* sd_phase: SDcard internal code */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t sd_phase;
  /* sd_status: SDcard status bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t sd_status;
  /* timing_err: Calculated error in ignition timing */
  /* scaling 1.0, offset 0.0, units none  */
  int8_t timing_err;
} POSTPACK can_0x61b_megasquirt_gp43_t;

typedef PREPACK struct {
  /* vvt_ang1: VVT actual angle 1 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_ang1;
  /* vvt_ang2: VVT actual angle 2 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_ang2;
  /* vvt_ang3: VVT actual angle 3 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_ang3;
  /* vvt_ang4: VVT actual angle 4 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_ang4;
} POSTPACK can_0x61c_megasquirt_gp44_t;

typedef PREPACK struct {
  /* vvt_target1: VVT target angle 1 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_target1;
  /* vvt_target2: VVT target angle 2 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_target2;
  /* vvt_target3: VVT target angle 3 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_target3;
  /* vvt_target4: VVT target angle 4 */
  /* scaling 1.0, offset 0.0, units deg  */
  int16_t vvt_target4;
} POSTPACK can_0x61d_megasquirt_gp45_t;

typedef PREPACK struct {
  /* inj_timing_pri: Injection Timing Angle (Primary) */
  /* scaling 0.1, offset 0.0, units deg BTDC  */
  int16_t inj_timing_pri;
  /* inj_timing_sec: Injection Timing Angle (Secondary) */
  /* scaling 0.1, offset 0.0, units deg BTDC  */
  int16_t inj_timing_sec;
  /* vvt_duty1: VVT solenoid duty cycle 1 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t vvt_duty1;
  /* vvt_duty2: VVT solenoid duty cycle 2 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t vvt_duty2;
  /* vvt_duty3: VVT solenoid duty cycle 3 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t vvt_duty3;
  /* vvt_duty4: VVT solenoid duty cycle 4 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t vvt_duty4;
} POSTPACK can_0x61e_megasquirt_gp46_t;

typedef PREPACK struct {
  /* fuel_pct: Ethanol content of fuel from Flex sensor */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t fuel_pct;
  /* tps_accel: TPSdot based accel */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t tps_accel;
  /* SS1: Shaft Speed 1 */
  /* scaling 10.0, offset 0.0, units RPM  */
  uint16_t SS1;
  /* SS2: Shaft Speed 2 */
  /* scaling 10.0, offset 0.0, units RPM  */
  uint16_t SS2;
} POSTPACK can_0x61f_megasquirt_gp47_t;

typedef PREPACK struct {
  /* knock_cyl1: Knock % cyl #1 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl1;
  /* knock_cyl2: Knock % cyl #2 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl2;
  /* knock_cyl3: Knock % cyl #3 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl3;
  /* knock_cyl4: Knock % cyl #4 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl4;
  /* knock_cyl5: Knock % cyl #5 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl5;
  /* knock_cyl6: Knock % cyl #6 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl6;
  /* knock_cyl7: Knock % cyl #7 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl7;
  /* knock_cyl8: Knock % cyl #8 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl8;
} POSTPACK can_0x620_megasquirt_gp48_t;

typedef PREPACK struct {
  /* knock_cyl9: Knock % cyl #9 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl9;
  /* knock_cyl10: Knock % cyl #10 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl10;
  /* knock_cyl11: Knock % cyl #11 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl11;
  /* knock_cyl12: Knock % cyl #12 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl12;
  /* knock_cyl13: Knock % cyl #13 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl13;
  /* knock_cyl14: Knock % cyl #14 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl14;
  /* knock_cyl15: Knock % cyl #15 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl15;
  /* knock_cyl16: Knock % cyl #16 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t knock_cyl16;
} POSTPACK can_0x621_megasquirt_gp49_t;

typedef PREPACK struct {
  /* map_accel: MAPdot based accel */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t map_accel;
  /* total_accel: Total accel */
  /* scaling 0.1, offset 0.0, units %  */
  int16_t total_accel;
  /* launch_timer: Timer for timed-launch retard */
  /* scaling 0.0, offset 0.0, units s  */
  uint16_t launch_timer;
  /* launch_retard: Launch retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t launch_retard;
} POSTPACK can_0x622_megasquirt_gp50_t;

typedef PREPACK struct {
  /* porta: CPU portA bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t porta;
  /* portb: CPU portB bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t portb;
  /* porteh: CPU portE/portH bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t porteh;
  /* portk: CPU portK bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t portk;
  /* portmj: CPU portM/portJ bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t portmj;
  /* portp: CPU portP bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t portp;
  /* portt: CPU portT bitfield */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t portt;
  /* cel_errorcode: CEL error code */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t cel_errorcode;
} POSTPACK can_0x623_megasquirt_gp51_t;

typedef PREPACK struct {
  /* fuelflow: Average fuel flow */
  /* scaling 1.0, offset 0.0, units cc/min  */
  uint16_t fuelflow;
  /* fuelcons: Average fuel consumption */
  /* scaling 1.0, offset 0.0, units l/km  */
  uint16_t fuelcons;
  /* canin1: CAN input 1 bitfield (CAN port 1 on MS2) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t canin1;
  /* canin2: CAN input 2 bitfield (CAN port 2 on MS2) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t canin2;
  /* canout: CAN output 1 bitfield (CAN port 3 on MS2) */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t canout;
  /* knk_rtd: Knock retard */
  /* scaling 0.1, offset 0.0, units deg  */
  uint8_t knk_rtd;
} POSTPACK can_0x624_megasquirt_gp52_t;

typedef PREPACK struct {
  /* fuel_press1: Fuel pressure 1 */
  /* scaling 0.1, offset 0.0, units kPa  */
  int16_t fuel_press1;
  /* fuel_press2: Fuel pressure 2 */
  /* scaling 0.1, offset 0.0, units kPa  */
  int16_t fuel_press2;
  /* fuel_temp1: Fuel temperature 1 */
  /* scaling 0.1, offset 0.0, units deg F  */
  int16_t fuel_temp1;
  /* fuel_temp2: Fuel temperature 2 */
  /* scaling 0.1, offset 0.0, units deg F  */
  int16_t fuel_temp2;
} POSTPACK can_0x625_megasquirt_gp53_t;

typedef PREPACK struct {
  /* batt_cur: Battery current (alternator system) */
  /* scaling 0.1, offset 0.0, units none  */
  int16_t batt_cur;
  /* cel_status: CEL status bitfield 1 */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t cel_status;
  /* fp_duty: Fuel pump output duty */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t fp_duty;
  /* alt_duty: Alternator field output duty */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t alt_duty;
  /* load_duty: Alternator measured load-sense duty */
  /* scaling 1.0, offset 0.0, units %  */
  uint8_t load_duty;
  /* alt_targv: Alternator target voltage */
  /* scaling 0.1, offset 0.0, units V  */
  uint8_t alt_targv;
} POSTPACK can_0x626_megasquirt_gp54_t;

typedef PREPACK struct {
  /* looptime: Main code loop execution time */
  /* scaling 1.0, offset 0.0, units us  */
  uint16_t looptime;
  /* fueltemp_cor: Fuel temperature correction */
  /* scaling 0.1, offset 0.0, units %  */
  uint16_t fueltemp_cor;
  /* fuelpress_cor: Fuel pressure correction */
  /* scaling 0.1, offset 0.0, units %  */
  uint16_t fuelpress_cor;
  /* ltt_cor: Long term trim correction */
  /* scaling 0.1, offset 0.0, units %  */
  int8_t ltt_cor;
  /* sp1: Unused */
  /* scaling 1.0, offset 0.0, units none  */
  uint8_t sp1;
} POSTPACK can_0x627_megasquirt_gp55_t;

typedef PREPACK struct {
  /* tc_retard: Traction control retard */
  /* scaling 0.1, offset 0.0, units def  */
  int16_t tc_retard;
  /* cel_retard: CEL retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t cel_retard;
  /* fc_retard: Fuel-cut (overrun) retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t fc_retard;
  /* als_addfuel: ALS added fuel */
  /* scaling 0.0, offset 0.0, units ms  */
  int16_t als_addfuel;
} POSTPACK can_0x628_megasquirt_gp56_t;

typedef PREPACK struct {
  /* base_advance: Base timing from tables */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t base_advance;
  /* idle_cor_advance: Idle correction advance */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t idle_cor_advance;
  /* mat_retard: MAT retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t mat_retard;
  /* flex_advance: Flex advance */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t flex_advance;
} POSTPACK can_0x629_megasquirt_gp57_t;

typedef PREPACK struct {
  /* adv1: Timing lookup from table 1 */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t adv1;
  /* adv2: Timing lookup from table 2 */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t adv2;
  /* adv3: Timing lookup from table 3 */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t adv3;
  /* adv4: Timing lookup from table 4 */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t adv4;
} POSTPACK can_0x62a_megasquirt_gp58_t;

typedef PREPACK struct {
  /* revlim_retard: Rev-limiter 'soft' retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t revlim_retard;
  /* als_timing: ALS timing change */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t als_timing;
  /* ext_advance: External advance (e.g. trans) */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t ext_advance;
  /* deadtime1: Injector deadtime in use (#1) */
  /* scaling 0.0, offset 0.0, units deg  */
  int16_t deadtime1;
} POSTPACK can_0x62b_megasquirt_gp59_t;

typedef PREPACK struct {
  /* launch_timing: Launch control timing */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t launch_timing;
  /* step3_timing: 3-step timing */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t step3_timing;
  /* vsslaunch_retard: Wheel-speed based launch retard */
  /* scaling 0.1, offset 0.0, units deg  */
  int16_t vsslaunch_retard;
  /* cel_status2: CEL status bitfield 2 */
  /* scaling 1.0, offset 0.0, units none  */
  uint16_t cel_status2;
} POSTPACK can_0x62c_megasquirt_gp60_t;

typedef PREPACK struct {
  /* gps_latmmin: GPS latitude milli-minutes */
  /* scaling 1.0, offset 0.0, units mmin  */
  uint16_t gps_latmmin;
  /* gps_lonmmin: GPS longitude milli-minutes */
  /* scaling 1.0, offset 0.0, units mmin  */
  uint16_t gps_lonmmin;
  /* gps_latdeg: GPS latitude degrees */
  /* scaling 1.0, offset 0.0, units deg  */
  int8_t gps_latdeg;
  /* gps_latmin: GPS latitude minutes */
  /* scaling 1.0, offset 0.0, units min  */
  uint8_t gps_latmin;
  /* gps_londeg: GPS longitude degrees */
  /* scaling 1.0, offset 0.0, units deg  */
  uint8_t gps_londeg;
  /* gps_lonmin: GPS longitude minutes */
  /* scaling 1.0, offset 0.0, units min  */
  uint8_t gps_lonmin;
} POSTPACK can_0x62d_megasquirt_gp61_t;

typedef PREPACK struct {
  /* gps_altm: GPS altitude (m) */
  /* scaling 1.0, offset 0.0, units m  */
  uint16_t gps_altm;
  /* gps_speed: GPS speed */
  /* scaling 0.1, offset 0.0, units m/s  */
  uint16_t gps_speed;
  /* gps_course: GPS course (heading) */
  /* scaling 0.1, offset 0.0, units deg  */
  uint16_t gps_course;
  /* gps_altk: GPS altitude (km) */
  /* scaling 1.0, offset 0.0, units km  */
  int8_t gps_altk;
  /* gps_west: GPS longitude west indicator bit (gps_outstatus) */
  /* scaling 1.0, offset 0.0, units none  */
  int8_t gps_west;
} POSTPACK can_0x62e_megasquirt_gp62_t;

typedef PREPACK struct {
  uint16_t spare63_1; /* scaling 1.0, offset 0.0, units none  */
  uint16_t spare63_2; /* scaling 1.0, offset 0.0, units none  */
  uint16_t spare63_3; /* scaling 1.0, offset 0.0, units none  */
  /* generic_pid_duty1: Generic closed-loop duty 1 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t generic_pid_duty1;
  /* generic_pid_duty2: Generic closed-loop duty 2 */
  /* scaling 0.4, offset 0.0, units %  */
  uint8_t generic_pid_duty2;
} POSTPACK can_0x62f_megasquirt_gp63_t;

/* This ID Transmits at 104 ms. */
typedef PREPACK struct {
  uint16_t Pack_DCL;           /* scaling 1.0, offset 0.0, units Amps  */
  uint16_t Pack_CCL;           /* scaling 1.0, offset 0.0, units Amps  */
  uint8_t High_Temperature;    /* scaling 1.0, offset 0.0, units Celsius  */
  uint8_t Low_Temperature;     /* scaling 1.0, offset 0.0, units Celsius  */
  uint8_t Average_Temperature; /* scaling 1.0, offset 0.0, units Celsius  */
  uint8_t CRC_Checksum;        /* scaling 1.0, offset 1721.0, units none  */
} POSTPACK can_0x6b1_MSGID_0X6B1_t;

/* This ID Transmits at 48 ms. */
typedef PREPACK struct {
  int16_t Pack_Current;         /* scaling 0.1, offset 0.0, units Amps  */
  uint16_t Pack_Open_Voltage;   /* scaling 0.1, offset 0.0, units Volts  */
  uint16_t Pack_Inst_Voltage;   /* scaling 0.1, offset 0.0, units Volts  */
  uint16_t Pack_Summed_Voltage; /* scaling 0.0, offset 0.0, units Volts  */
} POSTPACK can_0x6b2_MSGID_0X6B2_t;

/* This ID Transmits at 1008 ms. */
typedef PREPACK struct {
  uint16_t Pack_SOC; /* scaling 0.5, offset 0.0, units Percent  */
  uint8_t Blank1;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t Blank2;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t Blank3;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t Blank4;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t Blank5;    /* scaling 1.0, offset 0.0, units none  */
  uint8_t Blank6;    /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x6b3_MSGID_0X6B3_t;

typedef PREPACK struct {
  dbcc_time_stamp_t can_0x01a_segment1_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x01b_segment1_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x01c_segment1_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x02a_segment2_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x02b_segment2_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x02c_segment2_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x03a_segment3_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x03b_segment3_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x03c_segment3_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x04a_segment4_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x04b_segment4_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x04c_segment4_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x05a_segment5_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x05b_segment5_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x05c_segment5_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x069_precharge_status_time_stamp_rx;
  dbcc_time_stamp_t can_0x06a_segment6_temps1_time_stamp_rx;
  dbcc_time_stamp_t can_0x06b_segment6_temps2_time_stamp_rx;
  dbcc_time_stamp_t can_0x06c_segment6_sht_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a0_M160_Temperature_Set_1_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a1_M161_Temperature_Set_2_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a2_M162_Temperature_Set_3_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a3_M163_Analog_Input_Voltages_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a4_M164_Digital_Input_Status_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a5_M165_Motor_Position_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a6_M166_Current_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a7_M167_Voltage_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a8_M168_Flux_ID_IQ_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0a9_M169_Internal_Voltages_time_stamp_rx;
  dbcc_time_stamp_t can_0x0aa_M170_Internal_States_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ab_M171_Fault_Codes_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ac_M172_Torque_And_Timer_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ad_M173_Modulation_And_Flux_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ae_M174_Firmware_Info_time_stamp_rx;
  dbcc_time_stamp_t can_0x0af_M175_Diag_Data_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c0_M192_Command_Message_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c1_M193_Read_Write_Param_Command_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c2_M194_Read_Write_Param_Response_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c3_VCU_STATUS_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c4_VCU_PEDAL_READINGS_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c6_VCU_WHEELSPEED_READINGS_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c7_vcu_pedal_threshold_settings_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c8_vcu_firmware_version_time_stamp_rx;
  dbcc_time_stamp_t can_0x0c9_VCU_BOARD_READINGS_ONE_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ca_VCU_BOARD_READINGS_TWO_time_stamp_rx;
  dbcc_time_stamp_t can_0x0cb_vcu_launchcontrol_diagdata_time_stamp_rx;
  dbcc_time_stamp_t can_0x0cc_vcu_pedals_travel_time_stamp_rx;
  dbcc_time_stamp_t can_0x0cd_vcu_launchcontrol_countdown_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ce_vcu_distance_tracker_motor_time_stamp_rx;
  dbcc_time_stamp_t can_0x0cf_vcu_distance_tracker_wheelspeed_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d0_vcu_lifetime_distance_and_ontime_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d1_vcu_tractioncontrol_diagdata_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d2_vcu_distance_tracker_vectornav_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d3_vcu_coulomb_counters_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d4_vcu_calculated_slip_time_stamp_rx;
  dbcc_time_stamp_t can_0x0d5_vcu_power_limit_update_time_stamp_rx;
  dbcc_time_stamp_t can_0x0eb_dash_buttons_time_stamp_rx;
  dbcc_time_stamp_t can_0x0ec_dash_firmware_version_time_stamp_rx;
  dbcc_time_stamp_t can_0x1d5_M188_U2C_Message_Rxd_time_stamp_rx;
  dbcc_time_stamp_t can_0x1d7_M187_U2C_Command_Txd_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f4_evelogger_vectornav_time_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f5_evelogger_vectornav_attitude_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f6_evelogger_vectornav_gyro_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f7_evelogger_vectornav_position_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f8_evelogger_vectornav_velocity_time_stamp_rx;
  dbcc_time_stamp_t can_0x1f9_evelogger_vectornav_acceleration_time_stamp_rx;
  dbcc_time_stamp_t can_0x202_BMS_Current_Limit_time_stamp_rx;
  dbcc_time_stamp_t can_0x258_acu_shutdown_status_time_stamp_rx;
  dbcc_time_stamp_t can_0x259_acu_board_voltage_readings_time_stamp_rx;
  dbcc_time_stamp_t can_0x25a_acu_firmware_version_time_stamp_rx;
  dbcc_time_stamp_t can_0x384_cornernode_fl_shockpot_time_stamp_rx;
  dbcc_time_stamp_t can_0x385_cornernode_fr_shockpot_time_stamp_rx;
  dbcc_time_stamp_t can_0x386_cornernode_rl_shockpot_time_stamp_rx;
  dbcc_time_stamp_t can_0x387_cornernode_rr_shockpot_time_stamp_rx;
  dbcc_time_stamp_t can_0x388_cornernode_fl_wheelspeed_time_stamp_rx;
  dbcc_time_stamp_t can_0x389_cornernode_fr_wheelspeed_time_stamp_rx;
  dbcc_time_stamp_t can_0x38a_cornernode_rl_wheelspeed_time_stamp_rx;
  dbcc_time_stamp_t can_0x38b_cornernode_rr_wheelspeed_time_stamp_rx;
  dbcc_time_stamp_t can_0x38c_cornernode_fl_tiretemp_time_stamp_rx;
  dbcc_time_stamp_t can_0x38d_cornernode_fr_tiretemp_time_stamp_rx;
  dbcc_time_stamp_t can_0x38e_cornernode_rl_tiretemp_time_stamp_rx;
  dbcc_time_stamp_t can_0x38f_cornernode_rr_tiretemp_time_stamp_rx;
  dbcc_time_stamp_t can_0x390_cornernode_front_brakepressure_time_stamp_rx;
  dbcc_time_stamp_t can_0x391_cornernode_rear_brakepressure_time_stamp_rx;
  dbcc_time_stamp_t can_0x44c_omni_status_time_stamp_rx;
  dbcc_time_stamp_t can_0x44d_omni_accel_data_time_stamp_rx;
  dbcc_time_stamp_t can_0x44e_omni_gyro_data_time_stamp_rx;
  dbcc_time_stamp_t can_0x44f_omni_heading_data_time_stamp_rx;
  dbcc_time_stamp_t can_0x450_omni_shockpot_data_time_stamp_rx;
  dbcc_time_stamp_t can_0x451_omni_steering_data_time_stamp_rx;
  dbcc_time_stamp_t can_0x452_omni_gps_position_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f0_megasquirt_gp0_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f1_megasquirt_gp1_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f2_megasquirt_gp2_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f3_megasquirt_gp3_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f4_megasquirt_gp4_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f5_megasquirt_gp5_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f6_megasquirt_gp6_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f7_megasquirt_gp7_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f8_megasquirt_gp8_time_stamp_rx;
  dbcc_time_stamp_t can_0x5f9_megasquirt_gp9_time_stamp_rx;
  dbcc_time_stamp_t can_0x5fa_megasquirt_gp10_time_stamp_rx;
  dbcc_time_stamp_t can_0x5fb_megasquirt_gp11_time_stamp_rx;
  dbcc_time_stamp_t can_0x5fc_megasquirt_gp12_time_stamp_rx;
  dbcc_time_stamp_t can_0x5fd_megasquirt_gp13_time_stamp_rx;
  dbcc_time_stamp_t can_0x5fe_megasquirt_gp14_time_stamp_rx;
  dbcc_time_stamp_t can_0x5ff_megasquirt_gp15_time_stamp_rx;
  dbcc_time_stamp_t can_0x600_megasquirt_gp16_time_stamp_rx;
  dbcc_time_stamp_t can_0x601_megasquirt_gp17_time_stamp_rx;
  dbcc_time_stamp_t can_0x602_megasquirt_gp18_time_stamp_rx;
  dbcc_time_stamp_t can_0x603_megasquirt_gp19_time_stamp_rx;
  dbcc_time_stamp_t can_0x604_megasquirt_gp20_time_stamp_rx;
  dbcc_time_stamp_t can_0x605_megasquirt_gp21_time_stamp_rx;
  dbcc_time_stamp_t can_0x606_megasquirt_gp22_time_stamp_rx;
  dbcc_time_stamp_t can_0x607_megasquirt_gp23_time_stamp_rx;
  dbcc_time_stamp_t can_0x608_megasquirt_gp24_time_stamp_rx;
  dbcc_time_stamp_t can_0x609_megasquirt_gp25_time_stamp_rx;
  dbcc_time_stamp_t can_0x60a_megasquirt_gp26_time_stamp_rx;
  dbcc_time_stamp_t can_0x60b_megasquirt_gp27_time_stamp_rx;
  dbcc_time_stamp_t can_0x60c_megasquirt_gp28_time_stamp_rx;
  dbcc_time_stamp_t can_0x60d_megasquirt_gp29_time_stamp_rx;
  dbcc_time_stamp_t can_0x60e_megasquirt_gp30_time_stamp_rx;
  dbcc_time_stamp_t can_0x60f_megasquirt_gp31_time_stamp_rx;
  dbcc_time_stamp_t can_0x610_megasquirt_gp32_time_stamp_rx;
  dbcc_time_stamp_t can_0x611_megasquirt_gp33_time_stamp_rx;
  dbcc_time_stamp_t can_0x612_megasquirt_gp34_time_stamp_rx;
  dbcc_time_stamp_t can_0x613_megasquirt_gp35_time_stamp_rx;
  dbcc_time_stamp_t can_0x614_megasquirt_gp36_time_stamp_rx;
  dbcc_time_stamp_t can_0x615_megasquirt_gp37_time_stamp_rx;
  dbcc_time_stamp_t can_0x616_megasquirt_gp38_time_stamp_rx;
  dbcc_time_stamp_t can_0x617_megasquirt_gp39_time_stamp_rx;
  dbcc_time_stamp_t can_0x618_megasquirt_gp40_time_stamp_rx;
  dbcc_time_stamp_t can_0x619_megasquirt_gp41_time_stamp_rx;
  dbcc_time_stamp_t can_0x61a_megasquirt_gp42_time_stamp_rx;
  dbcc_time_stamp_t can_0x61b_megasquirt_gp43_time_stamp_rx;
  dbcc_time_stamp_t can_0x61c_megasquirt_gp44_time_stamp_rx;
  dbcc_time_stamp_t can_0x61d_megasquirt_gp45_time_stamp_rx;
  dbcc_time_stamp_t can_0x61e_megasquirt_gp46_time_stamp_rx;
  dbcc_time_stamp_t can_0x61f_megasquirt_gp47_time_stamp_rx;
  dbcc_time_stamp_t can_0x620_megasquirt_gp48_time_stamp_rx;
  dbcc_time_stamp_t can_0x621_megasquirt_gp49_time_stamp_rx;
  dbcc_time_stamp_t can_0x622_megasquirt_gp50_time_stamp_rx;
  dbcc_time_stamp_t can_0x623_megasquirt_gp51_time_stamp_rx;
  dbcc_time_stamp_t can_0x624_megasquirt_gp52_time_stamp_rx;
  dbcc_time_stamp_t can_0x625_megasquirt_gp53_time_stamp_rx;
  dbcc_time_stamp_t can_0x626_megasquirt_gp54_time_stamp_rx;
  dbcc_time_stamp_t can_0x627_megasquirt_gp55_time_stamp_rx;
  dbcc_time_stamp_t can_0x628_megasquirt_gp56_time_stamp_rx;
  dbcc_time_stamp_t can_0x629_megasquirt_gp57_time_stamp_rx;
  dbcc_time_stamp_t can_0x62a_megasquirt_gp58_time_stamp_rx;
  dbcc_time_stamp_t can_0x62b_megasquirt_gp59_time_stamp_rx;
  dbcc_time_stamp_t can_0x62c_megasquirt_gp60_time_stamp_rx;
  dbcc_time_stamp_t can_0x62d_megasquirt_gp61_time_stamp_rx;
  dbcc_time_stamp_t can_0x62e_megasquirt_gp62_time_stamp_rx;
  dbcc_time_stamp_t can_0x62f_megasquirt_gp63_time_stamp_rx;
  dbcc_time_stamp_t can_0x6b1_MSGID_0X6B1_time_stamp_rx;
  dbcc_time_stamp_t can_0x6b2_MSGID_0X6B2_time_stamp_rx;
  dbcc_time_stamp_t can_0x6b3_MSGID_0X6B3_time_stamp_rx;
  unsigned can_0x01a_segment1_temps1_status : 2;
  unsigned can_0x01a_segment1_temps1_tx : 1;
  unsigned can_0x01a_segment1_temps1_rx : 1;
  unsigned can_0x01b_segment1_temps2_status : 2;
  unsigned can_0x01b_segment1_temps2_tx : 1;
  unsigned can_0x01b_segment1_temps2_rx : 1;
  unsigned can_0x01c_segment1_sht_status : 2;
  unsigned can_0x01c_segment1_sht_tx : 1;
  unsigned can_0x01c_segment1_sht_rx : 1;
  unsigned can_0x02a_segment2_temps1_status : 2;
  unsigned can_0x02a_segment2_temps1_tx : 1;
  unsigned can_0x02a_segment2_temps1_rx : 1;
  unsigned can_0x02b_segment2_temps2_status : 2;
  unsigned can_0x02b_segment2_temps2_tx : 1;
  unsigned can_0x02b_segment2_temps2_rx : 1;
  unsigned can_0x02c_segment2_sht_status : 2;
  unsigned can_0x02c_segment2_sht_tx : 1;
  unsigned can_0x02c_segment2_sht_rx : 1;
  unsigned can_0x03a_segment3_temps1_status : 2;
  unsigned can_0x03a_segment3_temps1_tx : 1;
  unsigned can_0x03a_segment3_temps1_rx : 1;
  unsigned can_0x03b_segment3_temps2_status : 2;
  unsigned can_0x03b_segment3_temps2_tx : 1;
  unsigned can_0x03b_segment3_temps2_rx : 1;
  unsigned can_0x03c_segment3_sht_status : 2;
  unsigned can_0x03c_segment3_sht_tx : 1;
  unsigned can_0x03c_segment3_sht_rx : 1;
  unsigned can_0x04a_segment4_temps1_status : 2;
  unsigned can_0x04a_segment4_temps1_tx : 1;
  unsigned can_0x04a_segment4_temps1_rx : 1;
  unsigned can_0x04b_segment4_temps2_status : 2;
  unsigned can_0x04b_segment4_temps2_tx : 1;
  unsigned can_0x04b_segment4_temps2_rx : 1;
  unsigned can_0x04c_segment4_sht_status : 2;
  unsigned can_0x04c_segment4_sht_tx : 1;
  unsigned can_0x04c_segment4_sht_rx : 1;
  unsigned can_0x05a_segment5_temps1_status : 2;
  unsigned can_0x05a_segment5_temps1_tx : 1;
  unsigned can_0x05a_segment5_temps1_rx : 1;
  unsigned can_0x05b_segment5_temps2_status : 2;
  unsigned can_0x05b_segment5_temps2_tx : 1;
  unsigned can_0x05b_segment5_temps2_rx : 1;
  unsigned can_0x05c_segment5_sht_status : 2;
  unsigned can_0x05c_segment5_sht_tx : 1;
  unsigned can_0x05c_segment5_sht_rx : 1;
  unsigned can_0x069_precharge_status_status : 2;
  unsigned can_0x069_precharge_status_tx : 1;
  unsigned can_0x069_precharge_status_rx : 1;
  unsigned can_0x06a_segment6_temps1_status : 2;
  unsigned can_0x06a_segment6_temps1_tx : 1;
  unsigned can_0x06a_segment6_temps1_rx : 1;
  unsigned can_0x06b_segment6_temps2_status : 2;
  unsigned can_0x06b_segment6_temps2_tx : 1;
  unsigned can_0x06b_segment6_temps2_rx : 1;
  unsigned can_0x06c_segment6_sht_status : 2;
  unsigned can_0x06c_segment6_sht_tx : 1;
  unsigned can_0x06c_segment6_sht_rx : 1;
  unsigned can_0x0a0_M160_Temperature_Set_1_status : 2;
  unsigned can_0x0a0_M160_Temperature_Set_1_tx : 1;
  unsigned can_0x0a0_M160_Temperature_Set_1_rx : 1;
  unsigned can_0x0a1_M161_Temperature_Set_2_status : 2;
  unsigned can_0x0a1_M161_Temperature_Set_2_tx : 1;
  unsigned can_0x0a1_M161_Temperature_Set_2_rx : 1;
  unsigned can_0x0a2_M162_Temperature_Set_3_status : 2;
  unsigned can_0x0a2_M162_Temperature_Set_3_tx : 1;
  unsigned can_0x0a2_M162_Temperature_Set_3_rx : 1;
  unsigned can_0x0a3_M163_Analog_Input_Voltages_status : 2;
  unsigned can_0x0a3_M163_Analog_Input_Voltages_tx : 1;
  unsigned can_0x0a3_M163_Analog_Input_Voltages_rx : 1;
  unsigned can_0x0a4_M164_Digital_Input_Status_status : 2;
  unsigned can_0x0a4_M164_Digital_Input_Status_tx : 1;
  unsigned can_0x0a4_M164_Digital_Input_Status_rx : 1;
  unsigned can_0x0a5_M165_Motor_Position_Info_status : 2;
  unsigned can_0x0a5_M165_Motor_Position_Info_tx : 1;
  unsigned can_0x0a5_M165_Motor_Position_Info_rx : 1;
  unsigned can_0x0a6_M166_Current_Info_status : 2;
  unsigned can_0x0a6_M166_Current_Info_tx : 1;
  unsigned can_0x0a6_M166_Current_Info_rx : 1;
  unsigned can_0x0a7_M167_Voltage_Info_status : 2;
  unsigned can_0x0a7_M167_Voltage_Info_tx : 1;
  unsigned can_0x0a7_M167_Voltage_Info_rx : 1;
  unsigned can_0x0a8_M168_Flux_ID_IQ_Info_status : 2;
  unsigned can_0x0a8_M168_Flux_ID_IQ_Info_tx : 1;
  unsigned can_0x0a8_M168_Flux_ID_IQ_Info_rx : 1;
  unsigned can_0x0a9_M169_Internal_Voltages_status : 2;
  unsigned can_0x0a9_M169_Internal_Voltages_tx : 1;
  unsigned can_0x0a9_M169_Internal_Voltages_rx : 1;
  unsigned can_0x0aa_M170_Internal_States_status : 2;
  unsigned can_0x0aa_M170_Internal_States_tx : 1;
  unsigned can_0x0aa_M170_Internal_States_rx : 1;
  unsigned can_0x0ab_M171_Fault_Codes_status : 2;
  unsigned can_0x0ab_M171_Fault_Codes_tx : 1;
  unsigned can_0x0ab_M171_Fault_Codes_rx : 1;
  unsigned can_0x0ac_M172_Torque_And_Timer_Info_status : 2;
  unsigned can_0x0ac_M172_Torque_And_Timer_Info_tx : 1;
  unsigned can_0x0ac_M172_Torque_And_Timer_Info_rx : 1;
  unsigned can_0x0ad_M173_Modulation_And_Flux_Info_status : 2;
  unsigned can_0x0ad_M173_Modulation_And_Flux_Info_tx : 1;
  unsigned can_0x0ad_M173_Modulation_And_Flux_Info_rx : 1;
  unsigned can_0x0ae_M174_Firmware_Info_status : 2;
  unsigned can_0x0ae_M174_Firmware_Info_tx : 1;
  unsigned can_0x0ae_M174_Firmware_Info_rx : 1;
  unsigned can_0x0af_M175_Diag_Data_status : 2;
  unsigned can_0x0af_M175_Diag_Data_tx : 1;
  unsigned can_0x0af_M175_Diag_Data_rx : 1;
  unsigned can_0x0c0_M192_Command_Message_status : 2;
  unsigned can_0x0c0_M192_Command_Message_tx : 1;
  unsigned can_0x0c0_M192_Command_Message_rx : 1;
  unsigned can_0x0c1_M193_Read_Write_Param_Command_status : 2;
  unsigned can_0x0c1_M193_Read_Write_Param_Command_tx : 1;
  unsigned can_0x0c1_M193_Read_Write_Param_Command_rx : 1;
  unsigned can_0x0c2_M194_Read_Write_Param_Response_status : 2;
  unsigned can_0x0c2_M194_Read_Write_Param_Response_tx : 1;
  unsigned can_0x0c2_M194_Read_Write_Param_Response_rx : 1;
  unsigned can_0x0c3_VCU_STATUS_status : 2;
  unsigned can_0x0c3_VCU_STATUS_tx : 1;
  unsigned can_0x0c3_VCU_STATUS_rx : 1;
  unsigned can_0x0c4_VCU_PEDAL_READINGS_status : 2;
  unsigned can_0x0c4_VCU_PEDAL_READINGS_tx : 1;
  unsigned can_0x0c4_VCU_PEDAL_READINGS_rx : 1;
  unsigned can_0x0c6_VCU_WHEELSPEED_READINGS_status : 2;
  unsigned can_0x0c6_VCU_WHEELSPEED_READINGS_tx : 1;
  unsigned can_0x0c6_VCU_WHEELSPEED_READINGS_rx : 1;
  unsigned can_0x0c7_vcu_pedal_threshold_settings_status : 2;
  unsigned can_0x0c7_vcu_pedal_threshold_settings_tx : 1;
  unsigned can_0x0c7_vcu_pedal_threshold_settings_rx : 1;
  unsigned can_0x0c8_vcu_firmware_version_status : 2;
  unsigned can_0x0c8_vcu_firmware_version_tx : 1;
  unsigned can_0x0c8_vcu_firmware_version_rx : 1;
  unsigned can_0x0c9_VCU_BOARD_READINGS_ONE_status : 2;
  unsigned can_0x0c9_VCU_BOARD_READINGS_ONE_tx : 1;
  unsigned can_0x0c9_VCU_BOARD_READINGS_ONE_rx : 1;
  unsigned can_0x0ca_VCU_BOARD_READINGS_TWO_status : 2;
  unsigned can_0x0ca_VCU_BOARD_READINGS_TWO_tx : 1;
  unsigned can_0x0ca_VCU_BOARD_READINGS_TWO_rx : 1;
  unsigned can_0x0cb_vcu_launchcontrol_diagdata_status : 2;
  unsigned can_0x0cb_vcu_launchcontrol_diagdata_tx : 1;
  unsigned can_0x0cb_vcu_launchcontrol_diagdata_rx : 1;
  unsigned can_0x0cc_vcu_pedals_travel_status : 2;
  unsigned can_0x0cc_vcu_pedals_travel_tx : 1;
  unsigned can_0x0cc_vcu_pedals_travel_rx : 1;
  unsigned can_0x0cd_vcu_launchcontrol_countdown_status : 2;
  unsigned can_0x0cd_vcu_launchcontrol_countdown_tx : 1;
  unsigned can_0x0cd_vcu_launchcontrol_countdown_rx : 1;
  unsigned can_0x0ce_vcu_distance_tracker_motor_status : 2;
  unsigned can_0x0ce_vcu_distance_tracker_motor_tx : 1;
  unsigned can_0x0ce_vcu_distance_tracker_motor_rx : 1;
  unsigned can_0x0cf_vcu_distance_tracker_wheelspeed_status : 2;
  unsigned can_0x0cf_vcu_distance_tracker_wheelspeed_tx : 1;
  unsigned can_0x0cf_vcu_distance_tracker_wheelspeed_rx : 1;
  unsigned can_0x0d0_vcu_lifetime_distance_and_ontime_status : 2;
  unsigned can_0x0d0_vcu_lifetime_distance_and_ontime_tx : 1;
  unsigned can_0x0d0_vcu_lifetime_distance_and_ontime_rx : 1;
  unsigned can_0x0d1_vcu_tractioncontrol_diagdata_status : 2;
  unsigned can_0x0d1_vcu_tractioncontrol_diagdata_tx : 1;
  unsigned can_0x0d1_vcu_tractioncontrol_diagdata_rx : 1;
  unsigned can_0x0d2_vcu_distance_tracker_vectornav_status : 2;
  unsigned can_0x0d2_vcu_distance_tracker_vectornav_tx : 1;
  unsigned can_0x0d2_vcu_distance_tracker_vectornav_rx : 1;
  unsigned can_0x0d3_vcu_coulomb_counters_status : 2;
  unsigned can_0x0d3_vcu_coulomb_counters_tx : 1;
  unsigned can_0x0d3_vcu_coulomb_counters_rx : 1;
  unsigned can_0x0d4_vcu_calculated_slip_status : 2;
  unsigned can_0x0d4_vcu_calculated_slip_tx : 1;
  unsigned can_0x0d4_vcu_calculated_slip_rx : 1;
  unsigned can_0x0d5_vcu_power_limit_update_status : 2;
  unsigned can_0x0d5_vcu_power_limit_update_tx : 1;
  unsigned can_0x0d5_vcu_power_limit_update_rx : 1;
  unsigned can_0x0eb_dash_buttons_status : 2;
  unsigned can_0x0eb_dash_buttons_tx : 1;
  unsigned can_0x0eb_dash_buttons_rx : 1;
  unsigned can_0x0ec_dash_firmware_version_status : 2;
  unsigned can_0x0ec_dash_firmware_version_tx : 1;
  unsigned can_0x0ec_dash_firmware_version_rx : 1;
  unsigned can_0x1d5_M188_U2C_Message_Rxd_status : 2;
  unsigned can_0x1d5_M188_U2C_Message_Rxd_tx : 1;
  unsigned can_0x1d5_M188_U2C_Message_Rxd_rx : 1;
  unsigned can_0x1d7_M187_U2C_Command_Txd_status : 2;
  unsigned can_0x1d7_M187_U2C_Command_Txd_tx : 1;
  unsigned can_0x1d7_M187_U2C_Command_Txd_rx : 1;
  unsigned can_0x1f4_evelogger_vectornav_time_status : 2;
  unsigned can_0x1f4_evelogger_vectornav_time_tx : 1;
  unsigned can_0x1f4_evelogger_vectornav_time_rx : 1;
  unsigned can_0x1f5_evelogger_vectornav_attitude_status : 2;
  unsigned can_0x1f5_evelogger_vectornav_attitude_tx : 1;
  unsigned can_0x1f5_evelogger_vectornav_attitude_rx : 1;
  unsigned can_0x1f6_evelogger_vectornav_gyro_status : 2;
  unsigned can_0x1f6_evelogger_vectornav_gyro_tx : 1;
  unsigned can_0x1f6_evelogger_vectornav_gyro_rx : 1;
  unsigned can_0x1f7_evelogger_vectornav_position_status : 2;
  unsigned can_0x1f7_evelogger_vectornav_position_tx : 1;
  unsigned can_0x1f7_evelogger_vectornav_position_rx : 1;
  unsigned can_0x1f8_evelogger_vectornav_velocity_status : 2;
  unsigned can_0x1f8_evelogger_vectornav_velocity_tx : 1;
  unsigned can_0x1f8_evelogger_vectornav_velocity_rx : 1;
  unsigned can_0x1f9_evelogger_vectornav_acceleration_status : 2;
  unsigned can_0x1f9_evelogger_vectornav_acceleration_tx : 1;
  unsigned can_0x1f9_evelogger_vectornav_acceleration_rx : 1;
  unsigned can_0x202_BMS_Current_Limit_status : 2;
  unsigned can_0x202_BMS_Current_Limit_tx : 1;
  unsigned can_0x202_BMS_Current_Limit_rx : 1;
  unsigned can_0x258_acu_shutdown_status_status : 2;
  unsigned can_0x258_acu_shutdown_status_tx : 1;
  unsigned can_0x258_acu_shutdown_status_rx : 1;
  unsigned can_0x259_acu_board_voltage_readings_status : 2;
  unsigned can_0x259_acu_board_voltage_readings_tx : 1;
  unsigned can_0x259_acu_board_voltage_readings_rx : 1;
  unsigned can_0x25a_acu_firmware_version_status : 2;
  unsigned can_0x25a_acu_firmware_version_tx : 1;
  unsigned can_0x25a_acu_firmware_version_rx : 1;
  unsigned can_0x384_cornernode_fl_shockpot_status : 2;
  unsigned can_0x384_cornernode_fl_shockpot_tx : 1;
  unsigned can_0x384_cornernode_fl_shockpot_rx : 1;
  unsigned can_0x385_cornernode_fr_shockpot_status : 2;
  unsigned can_0x385_cornernode_fr_shockpot_tx : 1;
  unsigned can_0x385_cornernode_fr_shockpot_rx : 1;
  unsigned can_0x386_cornernode_rl_shockpot_status : 2;
  unsigned can_0x386_cornernode_rl_shockpot_tx : 1;
  unsigned can_0x386_cornernode_rl_shockpot_rx : 1;
  unsigned can_0x387_cornernode_rr_shockpot_status : 2;
  unsigned can_0x387_cornernode_rr_shockpot_tx : 1;
  unsigned can_0x387_cornernode_rr_shockpot_rx : 1;
  unsigned can_0x388_cornernode_fl_wheelspeed_status : 2;
  unsigned can_0x388_cornernode_fl_wheelspeed_tx : 1;
  unsigned can_0x388_cornernode_fl_wheelspeed_rx : 1;
  unsigned can_0x389_cornernode_fr_wheelspeed_status : 2;
  unsigned can_0x389_cornernode_fr_wheelspeed_tx : 1;
  unsigned can_0x389_cornernode_fr_wheelspeed_rx : 1;
  unsigned can_0x38a_cornernode_rl_wheelspeed_status : 2;
  unsigned can_0x38a_cornernode_rl_wheelspeed_tx : 1;
  unsigned can_0x38a_cornernode_rl_wheelspeed_rx : 1;
  unsigned can_0x38b_cornernode_rr_wheelspeed_status : 2;
  unsigned can_0x38b_cornernode_rr_wheelspeed_tx : 1;
  unsigned can_0x38b_cornernode_rr_wheelspeed_rx : 1;
  unsigned can_0x38c_cornernode_fl_tiretemp_status : 2;
  unsigned can_0x38c_cornernode_fl_tiretemp_tx : 1;
  unsigned can_0x38c_cornernode_fl_tiretemp_rx : 1;
  unsigned can_0x38d_cornernode_fr_tiretemp_status : 2;
  unsigned can_0x38d_cornernode_fr_tiretemp_tx : 1;
  unsigned can_0x38d_cornernode_fr_tiretemp_rx : 1;
  unsigned can_0x38e_cornernode_rl_tiretemp_status : 2;
  unsigned can_0x38e_cornernode_rl_tiretemp_tx : 1;
  unsigned can_0x38e_cornernode_rl_tiretemp_rx : 1;
  unsigned can_0x38f_cornernode_rr_tiretemp_status : 2;
  unsigned can_0x38f_cornernode_rr_tiretemp_tx : 1;
  unsigned can_0x38f_cornernode_rr_tiretemp_rx : 1;
  unsigned can_0x390_cornernode_front_brakepressure_status : 2;
  unsigned can_0x390_cornernode_front_brakepressure_tx : 1;
  unsigned can_0x390_cornernode_front_brakepressure_rx : 1;
  unsigned can_0x391_cornernode_rear_brakepressure_status : 2;
  unsigned can_0x391_cornernode_rear_brakepressure_tx : 1;
  unsigned can_0x391_cornernode_rear_brakepressure_rx : 1;
  unsigned can_0x44c_omni_status_status : 2;
  unsigned can_0x44c_omni_status_tx : 1;
  unsigned can_0x44c_omni_status_rx : 1;
  unsigned can_0x44d_omni_accel_data_status : 2;
  unsigned can_0x44d_omni_accel_data_tx : 1;
  unsigned can_0x44d_omni_accel_data_rx : 1;
  unsigned can_0x44e_omni_gyro_data_status : 2;
  unsigned can_0x44e_omni_gyro_data_tx : 1;
  unsigned can_0x44e_omni_gyro_data_rx : 1;
  unsigned can_0x44f_omni_heading_data_status : 2;
  unsigned can_0x44f_omni_heading_data_tx : 1;
  unsigned can_0x44f_omni_heading_data_rx : 1;
  unsigned can_0x450_omni_shockpot_data_status : 2;
  unsigned can_0x450_omni_shockpot_data_tx : 1;
  unsigned can_0x450_omni_shockpot_data_rx : 1;
  unsigned can_0x451_omni_steering_data_status : 2;
  unsigned can_0x451_omni_steering_data_tx : 1;
  unsigned can_0x451_omni_steering_data_rx : 1;
  unsigned can_0x452_omni_gps_position_status : 2;
  unsigned can_0x452_omni_gps_position_tx : 1;
  unsigned can_0x452_omni_gps_position_rx : 1;
  unsigned can_0x5f0_megasquirt_gp0_status : 2;
  unsigned can_0x5f0_megasquirt_gp0_tx : 1;
  unsigned can_0x5f0_megasquirt_gp0_rx : 1;
  unsigned can_0x5f1_megasquirt_gp1_status : 2;
  unsigned can_0x5f1_megasquirt_gp1_tx : 1;
  unsigned can_0x5f1_megasquirt_gp1_rx : 1;
  unsigned can_0x5f2_megasquirt_gp2_status : 2;
  unsigned can_0x5f2_megasquirt_gp2_tx : 1;
  unsigned can_0x5f2_megasquirt_gp2_rx : 1;
  unsigned can_0x5f3_megasquirt_gp3_status : 2;
  unsigned can_0x5f3_megasquirt_gp3_tx : 1;
  unsigned can_0x5f3_megasquirt_gp3_rx : 1;
  unsigned can_0x5f4_megasquirt_gp4_status : 2;
  unsigned can_0x5f4_megasquirt_gp4_tx : 1;
  unsigned can_0x5f4_megasquirt_gp4_rx : 1;
  unsigned can_0x5f5_megasquirt_gp5_status : 2;
  unsigned can_0x5f5_megasquirt_gp5_tx : 1;
  unsigned can_0x5f5_megasquirt_gp5_rx : 1;
  unsigned can_0x5f6_megasquirt_gp6_status : 2;
  unsigned can_0x5f6_megasquirt_gp6_tx : 1;
  unsigned can_0x5f6_megasquirt_gp6_rx : 1;
  unsigned can_0x5f7_megasquirt_gp7_status : 2;
  unsigned can_0x5f7_megasquirt_gp7_tx : 1;
  unsigned can_0x5f7_megasquirt_gp7_rx : 1;
  unsigned can_0x5f8_megasquirt_gp8_status : 2;
  unsigned can_0x5f8_megasquirt_gp8_tx : 1;
  unsigned can_0x5f8_megasquirt_gp8_rx : 1;
  unsigned can_0x5f9_megasquirt_gp9_status : 2;
  unsigned can_0x5f9_megasquirt_gp9_tx : 1;
  unsigned can_0x5f9_megasquirt_gp9_rx : 1;
  unsigned can_0x5fa_megasquirt_gp10_status : 2;
  unsigned can_0x5fa_megasquirt_gp10_tx : 1;
  unsigned can_0x5fa_megasquirt_gp10_rx : 1;
  unsigned can_0x5fb_megasquirt_gp11_status : 2;
  unsigned can_0x5fb_megasquirt_gp11_tx : 1;
  unsigned can_0x5fb_megasquirt_gp11_rx : 1;
  unsigned can_0x5fc_megasquirt_gp12_status : 2;
  unsigned can_0x5fc_megasquirt_gp12_tx : 1;
  unsigned can_0x5fc_megasquirt_gp12_rx : 1;
  unsigned can_0x5fd_megasquirt_gp13_status : 2;
  unsigned can_0x5fd_megasquirt_gp13_tx : 1;
  unsigned can_0x5fd_megasquirt_gp13_rx : 1;
  unsigned can_0x5fe_megasquirt_gp14_status : 2;
  unsigned can_0x5fe_megasquirt_gp14_tx : 1;
  unsigned can_0x5fe_megasquirt_gp14_rx : 1;
  unsigned can_0x5ff_megasquirt_gp15_status : 2;
  unsigned can_0x5ff_megasquirt_gp15_tx : 1;
  unsigned can_0x5ff_megasquirt_gp15_rx : 1;
  unsigned can_0x600_megasquirt_gp16_status : 2;
  unsigned can_0x600_megasquirt_gp16_tx : 1;
  unsigned can_0x600_megasquirt_gp16_rx : 1;
  unsigned can_0x601_megasquirt_gp17_status : 2;
  unsigned can_0x601_megasquirt_gp17_tx : 1;
  unsigned can_0x601_megasquirt_gp17_rx : 1;
  unsigned can_0x602_megasquirt_gp18_status : 2;
  unsigned can_0x602_megasquirt_gp18_tx : 1;
  unsigned can_0x602_megasquirt_gp18_rx : 1;
  unsigned can_0x603_megasquirt_gp19_status : 2;
  unsigned can_0x603_megasquirt_gp19_tx : 1;
  unsigned can_0x603_megasquirt_gp19_rx : 1;
  unsigned can_0x604_megasquirt_gp20_status : 2;
  unsigned can_0x604_megasquirt_gp20_tx : 1;
  unsigned can_0x604_megasquirt_gp20_rx : 1;
  unsigned can_0x605_megasquirt_gp21_status : 2;
  unsigned can_0x605_megasquirt_gp21_tx : 1;
  unsigned can_0x605_megasquirt_gp21_rx : 1;
  unsigned can_0x606_megasquirt_gp22_status : 2;
  unsigned can_0x606_megasquirt_gp22_tx : 1;
  unsigned can_0x606_megasquirt_gp22_rx : 1;
  unsigned can_0x607_megasquirt_gp23_status : 2;
  unsigned can_0x607_megasquirt_gp23_tx : 1;
  unsigned can_0x607_megasquirt_gp23_rx : 1;
  unsigned can_0x608_megasquirt_gp24_status : 2;
  unsigned can_0x608_megasquirt_gp24_tx : 1;
  unsigned can_0x608_megasquirt_gp24_rx : 1;
  unsigned can_0x609_megasquirt_gp25_status : 2;
  unsigned can_0x609_megasquirt_gp25_tx : 1;
  unsigned can_0x609_megasquirt_gp25_rx : 1;
  unsigned can_0x60a_megasquirt_gp26_status : 2;
  unsigned can_0x60a_megasquirt_gp26_tx : 1;
  unsigned can_0x60a_megasquirt_gp26_rx : 1;
  unsigned can_0x60b_megasquirt_gp27_status : 2;
  unsigned can_0x60b_megasquirt_gp27_tx : 1;
  unsigned can_0x60b_megasquirt_gp27_rx : 1;
  unsigned can_0x60c_megasquirt_gp28_status : 2;
  unsigned can_0x60c_megasquirt_gp28_tx : 1;
  unsigned can_0x60c_megasquirt_gp28_rx : 1;
  unsigned can_0x60d_megasquirt_gp29_status : 2;
  unsigned can_0x60d_megasquirt_gp29_tx : 1;
  unsigned can_0x60d_megasquirt_gp29_rx : 1;
  unsigned can_0x60e_megasquirt_gp30_status : 2;
  unsigned can_0x60e_megasquirt_gp30_tx : 1;
  unsigned can_0x60e_megasquirt_gp30_rx : 1;
  unsigned can_0x60f_megasquirt_gp31_status : 2;
  unsigned can_0x60f_megasquirt_gp31_tx : 1;
  unsigned can_0x60f_megasquirt_gp31_rx : 1;
  unsigned can_0x610_megasquirt_gp32_status : 2;
  unsigned can_0x610_megasquirt_gp32_tx : 1;
  unsigned can_0x610_megasquirt_gp32_rx : 1;
  unsigned can_0x611_megasquirt_gp33_status : 2;
  unsigned can_0x611_megasquirt_gp33_tx : 1;
  unsigned can_0x611_megasquirt_gp33_rx : 1;
  unsigned can_0x612_megasquirt_gp34_status : 2;
  unsigned can_0x612_megasquirt_gp34_tx : 1;
  unsigned can_0x612_megasquirt_gp34_rx : 1;
  unsigned can_0x613_megasquirt_gp35_status : 2;
  unsigned can_0x613_megasquirt_gp35_tx : 1;
  unsigned can_0x613_megasquirt_gp35_rx : 1;
  unsigned can_0x614_megasquirt_gp36_status : 2;
  unsigned can_0x614_megasquirt_gp36_tx : 1;
  unsigned can_0x614_megasquirt_gp36_rx : 1;
  unsigned can_0x615_megasquirt_gp37_status : 2;
  unsigned can_0x615_megasquirt_gp37_tx : 1;
  unsigned can_0x615_megasquirt_gp37_rx : 1;
  unsigned can_0x616_megasquirt_gp38_status : 2;
  unsigned can_0x616_megasquirt_gp38_tx : 1;
  unsigned can_0x616_megasquirt_gp38_rx : 1;
  unsigned can_0x617_megasquirt_gp39_status : 2;
  unsigned can_0x617_megasquirt_gp39_tx : 1;
  unsigned can_0x617_megasquirt_gp39_rx : 1;
  unsigned can_0x618_megasquirt_gp40_status : 2;
  unsigned can_0x618_megasquirt_gp40_tx : 1;
  unsigned can_0x618_megasquirt_gp40_rx : 1;
  unsigned can_0x619_megasquirt_gp41_status : 2;
  unsigned can_0x619_megasquirt_gp41_tx : 1;
  unsigned can_0x619_megasquirt_gp41_rx : 1;
  unsigned can_0x61a_megasquirt_gp42_status : 2;
  unsigned can_0x61a_megasquirt_gp42_tx : 1;
  unsigned can_0x61a_megasquirt_gp42_rx : 1;
  unsigned can_0x61b_megasquirt_gp43_status : 2;
  unsigned can_0x61b_megasquirt_gp43_tx : 1;
  unsigned can_0x61b_megasquirt_gp43_rx : 1;
  unsigned can_0x61c_megasquirt_gp44_status : 2;
  unsigned can_0x61c_megasquirt_gp44_tx : 1;
  unsigned can_0x61c_megasquirt_gp44_rx : 1;
  unsigned can_0x61d_megasquirt_gp45_status : 2;
  unsigned can_0x61d_megasquirt_gp45_tx : 1;
  unsigned can_0x61d_megasquirt_gp45_rx : 1;
  unsigned can_0x61e_megasquirt_gp46_status : 2;
  unsigned can_0x61e_megasquirt_gp46_tx : 1;
  unsigned can_0x61e_megasquirt_gp46_rx : 1;
  unsigned can_0x61f_megasquirt_gp47_status : 2;
  unsigned can_0x61f_megasquirt_gp47_tx : 1;
  unsigned can_0x61f_megasquirt_gp47_rx : 1;
  unsigned can_0x620_megasquirt_gp48_status : 2;
  unsigned can_0x620_megasquirt_gp48_tx : 1;
  unsigned can_0x620_megasquirt_gp48_rx : 1;
  unsigned can_0x621_megasquirt_gp49_status : 2;
  unsigned can_0x621_megasquirt_gp49_tx : 1;
  unsigned can_0x621_megasquirt_gp49_rx : 1;
  unsigned can_0x622_megasquirt_gp50_status : 2;
  unsigned can_0x622_megasquirt_gp50_tx : 1;
  unsigned can_0x622_megasquirt_gp50_rx : 1;
  unsigned can_0x623_megasquirt_gp51_status : 2;
  unsigned can_0x623_megasquirt_gp51_tx : 1;
  unsigned can_0x623_megasquirt_gp51_rx : 1;
  unsigned can_0x624_megasquirt_gp52_status : 2;
  unsigned can_0x624_megasquirt_gp52_tx : 1;
  unsigned can_0x624_megasquirt_gp52_rx : 1;
  unsigned can_0x625_megasquirt_gp53_status : 2;
  unsigned can_0x625_megasquirt_gp53_tx : 1;
  unsigned can_0x625_megasquirt_gp53_rx : 1;
  unsigned can_0x626_megasquirt_gp54_status : 2;
  unsigned can_0x626_megasquirt_gp54_tx : 1;
  unsigned can_0x626_megasquirt_gp54_rx : 1;
  unsigned can_0x627_megasquirt_gp55_status : 2;
  unsigned can_0x627_megasquirt_gp55_tx : 1;
  unsigned can_0x627_megasquirt_gp55_rx : 1;
  unsigned can_0x628_megasquirt_gp56_status : 2;
  unsigned can_0x628_megasquirt_gp56_tx : 1;
  unsigned can_0x628_megasquirt_gp56_rx : 1;
  unsigned can_0x629_megasquirt_gp57_status : 2;
  unsigned can_0x629_megasquirt_gp57_tx : 1;
  unsigned can_0x629_megasquirt_gp57_rx : 1;
  unsigned can_0x62a_megasquirt_gp58_status : 2;
  unsigned can_0x62a_megasquirt_gp58_tx : 1;
  unsigned can_0x62a_megasquirt_gp58_rx : 1;
  unsigned can_0x62b_megasquirt_gp59_status : 2;
  unsigned can_0x62b_megasquirt_gp59_tx : 1;
  unsigned can_0x62b_megasquirt_gp59_rx : 1;
  unsigned can_0x62c_megasquirt_gp60_status : 2;
  unsigned can_0x62c_megasquirt_gp60_tx : 1;
  unsigned can_0x62c_megasquirt_gp60_rx : 1;
  unsigned can_0x62d_megasquirt_gp61_status : 2;
  unsigned can_0x62d_megasquirt_gp61_tx : 1;
  unsigned can_0x62d_megasquirt_gp61_rx : 1;
  unsigned can_0x62e_megasquirt_gp62_status : 2;
  unsigned can_0x62e_megasquirt_gp62_tx : 1;
  unsigned can_0x62e_megasquirt_gp62_rx : 1;
  unsigned can_0x62f_megasquirt_gp63_status : 2;
  unsigned can_0x62f_megasquirt_gp63_tx : 1;
  unsigned can_0x62f_megasquirt_gp63_rx : 1;
  unsigned can_0x6b1_MSGID_0X6B1_status : 2;
  unsigned can_0x6b1_MSGID_0X6B1_tx : 1;
  unsigned can_0x6b1_MSGID_0X6B1_rx : 1;
  unsigned can_0x6b2_MSGID_0X6B2_status : 2;
  unsigned can_0x6b2_MSGID_0X6B2_tx : 1;
  unsigned can_0x6b2_MSGID_0X6B2_rx : 1;
  unsigned can_0x6b3_MSGID_0X6B3_status : 2;
  unsigned can_0x6b3_MSGID_0X6B3_tx : 1;
  unsigned can_0x6b3_MSGID_0X6B3_rx : 1;
  can_0x01a_segment1_temps1_t can_0x01a_segment1_temps1;
  can_0x01b_segment1_temps2_t can_0x01b_segment1_temps2;
  can_0x01c_segment1_sht_t can_0x01c_segment1_sht;
  can_0x02a_segment2_temps1_t can_0x02a_segment2_temps1;
  can_0x02b_segment2_temps2_t can_0x02b_segment2_temps2;
  can_0x02c_segment2_sht_t can_0x02c_segment2_sht;
  can_0x03a_segment3_temps1_t can_0x03a_segment3_temps1;
  can_0x03b_segment3_temps2_t can_0x03b_segment3_temps2;
  can_0x03c_segment3_sht_t can_0x03c_segment3_sht;
  can_0x04a_segment4_temps1_t can_0x04a_segment4_temps1;
  can_0x04b_segment4_temps2_t can_0x04b_segment4_temps2;
  can_0x04c_segment4_sht_t can_0x04c_segment4_sht;
  can_0x05a_segment5_temps1_t can_0x05a_segment5_temps1;
  can_0x05b_segment5_temps2_t can_0x05b_segment5_temps2;
  can_0x05c_segment5_sht_t can_0x05c_segment5_sht;
  can_0x069_precharge_status_t can_0x069_precharge_status;
  can_0x06a_segment6_temps1_t can_0x06a_segment6_temps1;
  can_0x06b_segment6_temps2_t can_0x06b_segment6_temps2;
  can_0x06c_segment6_sht_t can_0x06c_segment6_sht;
  can_0x0a0_M160_Temperature_Set_1_t can_0x0a0_M160_Temperature_Set_1;
  can_0x0a1_M161_Temperature_Set_2_t can_0x0a1_M161_Temperature_Set_2;
  can_0x0a2_M162_Temperature_Set_3_t can_0x0a2_M162_Temperature_Set_3;
  can_0x0a3_M163_Analog_Input_Voltages_t can_0x0a3_M163_Analog_Input_Voltages;
  can_0x0a4_M164_Digital_Input_Status_t can_0x0a4_M164_Digital_Input_Status;
  can_0x0a5_M165_Motor_Position_Info_t can_0x0a5_M165_Motor_Position_Info;
  can_0x0a6_M166_Current_Info_t can_0x0a6_M166_Current_Info;
  can_0x0a7_M167_Voltage_Info_t can_0x0a7_M167_Voltage_Info;
  can_0x0a8_M168_Flux_ID_IQ_Info_t can_0x0a8_M168_Flux_ID_IQ_Info;
  can_0x0a9_M169_Internal_Voltages_t can_0x0a9_M169_Internal_Voltages;
  can_0x0aa_M170_Internal_States_t can_0x0aa_M170_Internal_States;
  can_0x0ab_M171_Fault_Codes_t can_0x0ab_M171_Fault_Codes;
  can_0x0ac_M172_Torque_And_Timer_Info_t can_0x0ac_M172_Torque_And_Timer_Info;
  can_0x0ad_M173_Modulation_And_Flux_Info_t
      can_0x0ad_M173_Modulation_And_Flux_Info;
  can_0x0ae_M174_Firmware_Info_t can_0x0ae_M174_Firmware_Info;
  can_0x0af_M175_Diag_Data_t can_0x0af_M175_Diag_Data;
  can_0x0c0_M192_Command_Message_t can_0x0c0_M192_Command_Message;
  can_0x0c1_M193_Read_Write_Param_Command_t
      can_0x0c1_M193_Read_Write_Param_Command;
  can_0x0c2_M194_Read_Write_Param_Response_t
      can_0x0c2_M194_Read_Write_Param_Response;
  can_0x0c3_VCU_STATUS_t can_0x0c3_VCU_STATUS;
  can_0x0c4_VCU_PEDAL_READINGS_t can_0x0c4_VCU_PEDAL_READINGS;
  can_0x0c6_VCU_WHEELSPEED_READINGS_t can_0x0c6_VCU_WHEELSPEED_READINGS;
  can_0x0c7_vcu_pedal_threshold_settings_t
      can_0x0c7_vcu_pedal_threshold_settings;
  can_0x0c8_vcu_firmware_version_t can_0x0c8_vcu_firmware_version;
  can_0x0c9_VCU_BOARD_READINGS_ONE_t can_0x0c9_VCU_BOARD_READINGS_ONE;
  can_0x0ca_VCU_BOARD_READINGS_TWO_t can_0x0ca_VCU_BOARD_READINGS_TWO;
  can_0x0cb_vcu_launchcontrol_diagdata_t can_0x0cb_vcu_launchcontrol_diagdata;
  can_0x0cc_vcu_pedals_travel_t can_0x0cc_vcu_pedals_travel;
  can_0x0cd_vcu_launchcontrol_countdown_t can_0x0cd_vcu_launchcontrol_countdown;
  can_0x0ce_vcu_distance_tracker_motor_t can_0x0ce_vcu_distance_tracker_motor;
  can_0x0cf_vcu_distance_tracker_wheelspeed_t
      can_0x0cf_vcu_distance_tracker_wheelspeed;
  can_0x0d0_vcu_lifetime_distance_and_ontime_t
      can_0x0d0_vcu_lifetime_distance_and_ontime;
  can_0x0d1_vcu_tractioncontrol_diagdata_t
      can_0x0d1_vcu_tractioncontrol_diagdata;
  can_0x0d2_vcu_distance_tracker_vectornav_t
      can_0x0d2_vcu_distance_tracker_vectornav;
  can_0x0d3_vcu_coulomb_counters_t can_0x0d3_vcu_coulomb_counters;
  can_0x0d4_vcu_calculated_slip_t can_0x0d4_vcu_calculated_slip;
  can_0x0d5_vcu_power_limit_update_t can_0x0d5_vcu_power_limit_update;
  can_0x0eb_dash_buttons_t can_0x0eb_dash_buttons;
  can_0x0ec_dash_firmware_version_t can_0x0ec_dash_firmware_version;
  can_0x1d5_M188_U2C_Message_Rxd_t can_0x1d5_M188_U2C_Message_Rxd;
  can_0x1d7_M187_U2C_Command_Txd_t can_0x1d7_M187_U2C_Command_Txd;
  can_0x1f4_evelogger_vectornav_time_t can_0x1f4_evelogger_vectornav_time;
  can_0x1f5_evelogger_vectornav_attitude_t
      can_0x1f5_evelogger_vectornav_attitude;
  can_0x1f6_evelogger_vectornav_gyro_t can_0x1f6_evelogger_vectornav_gyro;
  can_0x1f7_evelogger_vectornav_position_t
      can_0x1f7_evelogger_vectornav_position;
  can_0x1f8_evelogger_vectornav_velocity_t
      can_0x1f8_evelogger_vectornav_velocity;
  can_0x1f9_evelogger_vectornav_acceleration_t
      can_0x1f9_evelogger_vectornav_acceleration;
  can_0x202_BMS_Current_Limit_t can_0x202_BMS_Current_Limit;
  can_0x258_acu_shutdown_status_t can_0x258_acu_shutdown_status;
  can_0x259_acu_board_voltage_readings_t can_0x259_acu_board_voltage_readings;
  can_0x25a_acu_firmware_version_t can_0x25a_acu_firmware_version;
  can_0x384_cornernode_fl_shockpot_t can_0x384_cornernode_fl_shockpot;
  can_0x385_cornernode_fr_shockpot_t can_0x385_cornernode_fr_shockpot;
  can_0x386_cornernode_rl_shockpot_t can_0x386_cornernode_rl_shockpot;
  can_0x387_cornernode_rr_shockpot_t can_0x387_cornernode_rr_shockpot;
  can_0x388_cornernode_fl_wheelspeed_t can_0x388_cornernode_fl_wheelspeed;
  can_0x389_cornernode_fr_wheelspeed_t can_0x389_cornernode_fr_wheelspeed;
  can_0x38a_cornernode_rl_wheelspeed_t can_0x38a_cornernode_rl_wheelspeed;
  can_0x38b_cornernode_rr_wheelspeed_t can_0x38b_cornernode_rr_wheelspeed;
  can_0x38c_cornernode_fl_tiretemp_t can_0x38c_cornernode_fl_tiretemp;
  can_0x38d_cornernode_fr_tiretemp_t can_0x38d_cornernode_fr_tiretemp;
  can_0x38e_cornernode_rl_tiretemp_t can_0x38e_cornernode_rl_tiretemp;
  can_0x38f_cornernode_rr_tiretemp_t can_0x38f_cornernode_rr_tiretemp;
  can_0x390_cornernode_front_brakepressure_t
      can_0x390_cornernode_front_brakepressure;
  can_0x391_cornernode_rear_brakepressure_t
      can_0x391_cornernode_rear_brakepressure;
  can_0x44c_omni_status_t can_0x44c_omni_status;
  can_0x44d_omni_accel_data_t can_0x44d_omni_accel_data;
  can_0x44e_omni_gyro_data_t can_0x44e_omni_gyro_data;
  can_0x44f_omni_heading_data_t can_0x44f_omni_heading_data;
  can_0x450_omni_shockpot_data_t can_0x450_omni_shockpot_data;
  can_0x451_omni_steering_data_t can_0x451_omni_steering_data;
  can_0x452_omni_gps_position_t can_0x452_omni_gps_position;
  can_0x5f0_megasquirt_gp0_t can_0x5f0_megasquirt_gp0;
  can_0x5f1_megasquirt_gp1_t can_0x5f1_megasquirt_gp1;
  can_0x5f2_megasquirt_gp2_t can_0x5f2_megasquirt_gp2;
  can_0x5f3_megasquirt_gp3_t can_0x5f3_megasquirt_gp3;
  can_0x5f4_megasquirt_gp4_t can_0x5f4_megasquirt_gp4;
  can_0x5f5_megasquirt_gp5_t can_0x5f5_megasquirt_gp5;
  can_0x5f6_megasquirt_gp6_t can_0x5f6_megasquirt_gp6;
  can_0x5f7_megasquirt_gp7_t can_0x5f7_megasquirt_gp7;
  can_0x5f8_megasquirt_gp8_t can_0x5f8_megasquirt_gp8;
  can_0x5f9_megasquirt_gp9_t can_0x5f9_megasquirt_gp9;
  can_0x5fa_megasquirt_gp10_t can_0x5fa_megasquirt_gp10;
  can_0x5fb_megasquirt_gp11_t can_0x5fb_megasquirt_gp11;
  can_0x5fc_megasquirt_gp12_t can_0x5fc_megasquirt_gp12;
  can_0x5fd_megasquirt_gp13_t can_0x5fd_megasquirt_gp13;
  can_0x5fe_megasquirt_gp14_t can_0x5fe_megasquirt_gp14;
  can_0x5ff_megasquirt_gp15_t can_0x5ff_megasquirt_gp15;
  can_0x600_megasquirt_gp16_t can_0x600_megasquirt_gp16;
  can_0x601_megasquirt_gp17_t can_0x601_megasquirt_gp17;
  can_0x602_megasquirt_gp18_t can_0x602_megasquirt_gp18;
  can_0x603_megasquirt_gp19_t can_0x603_megasquirt_gp19;
  can_0x604_megasquirt_gp20_t can_0x604_megasquirt_gp20;
  can_0x605_megasquirt_gp21_t can_0x605_megasquirt_gp21;
  can_0x606_megasquirt_gp22_t can_0x606_megasquirt_gp22;
  can_0x607_megasquirt_gp23_t can_0x607_megasquirt_gp23;
  can_0x608_megasquirt_gp24_t can_0x608_megasquirt_gp24;
  can_0x609_megasquirt_gp25_t can_0x609_megasquirt_gp25;
  can_0x60a_megasquirt_gp26_t can_0x60a_megasquirt_gp26;
  can_0x60b_megasquirt_gp27_t can_0x60b_megasquirt_gp27;
  can_0x60c_megasquirt_gp28_t can_0x60c_megasquirt_gp28;
  can_0x60d_megasquirt_gp29_t can_0x60d_megasquirt_gp29;
  can_0x60e_megasquirt_gp30_t can_0x60e_megasquirt_gp30;
  can_0x60f_megasquirt_gp31_t can_0x60f_megasquirt_gp31;
  can_0x610_megasquirt_gp32_t can_0x610_megasquirt_gp32;
  can_0x611_megasquirt_gp33_t can_0x611_megasquirt_gp33;
  can_0x612_megasquirt_gp34_t can_0x612_megasquirt_gp34;
  can_0x613_megasquirt_gp35_t can_0x613_megasquirt_gp35;
  can_0x614_megasquirt_gp36_t can_0x614_megasquirt_gp36;
  can_0x615_megasquirt_gp37_t can_0x615_megasquirt_gp37;
  can_0x616_megasquirt_gp38_t can_0x616_megasquirt_gp38;
  can_0x617_megasquirt_gp39_t can_0x617_megasquirt_gp39;
  can_0x618_megasquirt_gp40_t can_0x618_megasquirt_gp40;
  can_0x619_megasquirt_gp41_t can_0x619_megasquirt_gp41;
  can_0x61a_megasquirt_gp42_t can_0x61a_megasquirt_gp42;
  can_0x61b_megasquirt_gp43_t can_0x61b_megasquirt_gp43;
  can_0x61c_megasquirt_gp44_t can_0x61c_megasquirt_gp44;
  can_0x61d_megasquirt_gp45_t can_0x61d_megasquirt_gp45;
  can_0x61e_megasquirt_gp46_t can_0x61e_megasquirt_gp46;
  can_0x61f_megasquirt_gp47_t can_0x61f_megasquirt_gp47;
  can_0x620_megasquirt_gp48_t can_0x620_megasquirt_gp48;
  can_0x621_megasquirt_gp49_t can_0x621_megasquirt_gp49;
  can_0x622_megasquirt_gp50_t can_0x622_megasquirt_gp50;
  can_0x623_megasquirt_gp51_t can_0x623_megasquirt_gp51;
  can_0x624_megasquirt_gp52_t can_0x624_megasquirt_gp52;
  can_0x625_megasquirt_gp53_t can_0x625_megasquirt_gp53;
  can_0x626_megasquirt_gp54_t can_0x626_megasquirt_gp54;
  can_0x627_megasquirt_gp55_t can_0x627_megasquirt_gp55;
  can_0x628_megasquirt_gp56_t can_0x628_megasquirt_gp56;
  can_0x629_megasquirt_gp57_t can_0x629_megasquirt_gp57;
  can_0x62a_megasquirt_gp58_t can_0x62a_megasquirt_gp58;
  can_0x62b_megasquirt_gp59_t can_0x62b_megasquirt_gp59;
  can_0x62c_megasquirt_gp60_t can_0x62c_megasquirt_gp60;
  can_0x62d_megasquirt_gp61_t can_0x62d_megasquirt_gp61;
  can_0x62e_megasquirt_gp62_t can_0x62e_megasquirt_gp62;
  can_0x62f_megasquirt_gp63_t can_0x62f_megasquirt_gp63;
  can_0x6b1_MSGID_0X6B1_t can_0x6b1_MSGID_0X6B1;
  can_0x6b2_MSGID_0X6B2_t can_0x6b2_MSGID_0X6B2;
  can_0x6b3_MSGID_0X6B3_t can_0x6b3_MSGID_0X6B3;
} POSTPACK can_obj_ksu_ev_can_h_t;

int unpack_message(can_obj_ksu_ev_can_h_t *o, const unsigned long id,
                   uint64_t data, uint8_t dlc, dbcc_time_stamp_t time_stamp);
int pack_message(can_obj_ksu_ev_can_h_t *o, const unsigned long id,
                 uint64_t *data);
int print_message(const can_obj_ksu_ev_can_h_t *o, const unsigned long id,
                  FILE *output);

int decode_can_0x01a_cell1temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell1temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01a_cell2temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell2temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01a_cell3temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell3temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01a_cell4temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell4temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01a_cell5temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell5temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01a_cell6temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01a_cell6temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x01b_cell7temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell7temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01b_cell8temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell8temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01b_cell9temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell9temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01b_cell10temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell10temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01b_cell11temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell11temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01b_cell12temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x01b_cell12temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x01c_segment1_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x01c_segment1_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x01c_segment1_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x01c_segment1_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x02a_cell13temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell13temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02a_cell14temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell14temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02a_cell15temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell15temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02a_cell16temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell16temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02a_cell17temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell17temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02a_cell18temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02a_cell18temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x02b_cell19temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell19temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02b_cell20temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell20temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02b_cell21temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell21temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02b_cell22temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell22temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02b_cell23temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell23temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02b_cell24temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x02b_cell24temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x02c_segment2_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x02c_segment2_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x02c_segment2_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x02c_segment2_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x03a_cell25temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell25temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03a_cell26temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell26temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03a_cell27temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell27temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03a_cell28temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell28temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03a_cell29temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell29temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03a_cell30temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03a_cell30temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x03b_cell31temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell31temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03b_cell32temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell32temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03b_cell33temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell33temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03b_cell34temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell34temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03b_cell35temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell35temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03b_cell36temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x03b_cell36temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x03c_segment3_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x03c_segment3_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x03c_segment3_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x03c_segment3_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x04a_cell37temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell37temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04a_cell38temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell38temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04a_cell39temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell39temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04a_cell40temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell40temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04a_cell41temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell41temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04a_cell42temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04a_cell42temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x04b_cell43temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell43temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04b_cell44temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell44temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04b_cell45temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell45temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04b_cell46temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell46temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04b_cell47temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell47temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04b_cell48temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x04b_cell48temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x04c_segment4_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x04c_segment4_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x04c_segment4_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x04c_segment4_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x05a_cell49temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell49temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05a_cell50temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell50temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05a_cell51temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell51temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05a_cell52temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell52temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05a_cell53temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell53temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05a_cell54temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05a_cell54temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x05b_cell55temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell55temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05b_cell56temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell56temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05b_cell57temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell57temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05b_cell58temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell58temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05b_cell59temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell59temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05b_cell60temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x05b_cell60temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x05c_segment5_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x05c_segment5_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x05c_segment5_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x05c_segment5_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x069_precharge_state(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x069_precharge_state(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x069_precharge_accVoltageMod100(const can_obj_ksu_ev_can_h_t *o,
                                                uint8_t *out);
int encode_can_0x069_precharge_accVoltageMod100(can_obj_ksu_ev_can_h_t *o,
                                                uint8_t in);
int decode_can_0x069_precharge_accVoltageDiv100(const can_obj_ksu_ev_can_h_t *o,
                                                uint8_t *out);
int encode_can_0x069_precharge_accVoltageDiv100(can_obj_ksu_ev_can_h_t *o,
                                                uint8_t in);
int decode_can_0x069_precharge_tsVoltageMod100(const can_obj_ksu_ev_can_h_t *o,
                                               uint8_t *out);
int encode_can_0x069_precharge_tsVoltageMod100(can_obj_ksu_ev_can_h_t *o,
                                               uint8_t in);
int decode_can_0x069_precharge_tsVoltageDiv100(const can_obj_ksu_ev_can_h_t *o,
                                               uint8_t *out);
int encode_can_0x069_precharge_tsVoltageDiv100(can_obj_ksu_ev_can_h_t *o,
                                               uint8_t in);
int decode_can_0x069_precharge_errorCode(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x069_precharge_errorCode(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x06a_cell61temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell61temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06a_cell62temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell62temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06a_cell63temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell63temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06a_cell64temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell64temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06a_cell65temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell65temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06a_cell66temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06a_cell66temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x06b_cell67temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell67temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06b_cell68temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell68temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06b_cell69temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell69temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06b_cell70temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell70temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06b_cell71temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell71temp(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06b_cell72temp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x06b_cell72temp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x06c_segment6_temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x06c_segment6_temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x06c_segment6_humidity(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x06c_segment6_humidity(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a0_D1_Module_A(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a0_D1_Module_A(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a0_D2_Module_B(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a0_D2_Module_B(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a0_D3_Module_C(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a0_D3_Module_C(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a0_D4_Gate_Driver_Board(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x0a0_D4_Gate_Driver_Board(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a1_D1_Control_Board_Temperature(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a1_D1_Control_Board_Temperature(can_obj_ksu_ev_can_h_t *o,
                                                  double in);
int decode_can_0x0a1_D2_RTD1_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0a1_D2_RTD1_Temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a1_D3_RTD2_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0a1_D3_RTD2_Temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a1_D4_RTD3_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0a1_D4_RTD3_Temperature(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a2_D1_RTD4_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0a2_D1_RTD4_Temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a2_D2_RTD5_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0a2_D2_RTD5_Temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a2_D3_Motor_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x0a2_D3_Motor_Temperature(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a2_D4_Torque_Shudder(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a2_D4_Torque_Shudder(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a3_D1_Analog_Input_1(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D1_Analog_Input_1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a3_D2_Analog_Input_2(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D2_Analog_Input_2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a3_D3_Analog_Input_3(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D3_Analog_Input_3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a3_D4_Analog_Input_4(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D4_Analog_Input_4(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a3_D5_Analog_Input_5(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D5_Analog_Input_5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a3_D6_Analog_Input_6(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a3_D6_Analog_Input_6(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a4_D1_Digital_Input_1(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D1_Digital_Input_1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D2_Digital_Input_2(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D2_Digital_Input_2(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D3_Digital_Input_3(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D3_Digital_Input_3(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D4_Digital_Input_4(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D4_Digital_Input_4(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D5_Digital_Input_5(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D5_Digital_Input_5(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D6_Digital_Input_6(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D6_Digital_Input_6(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D7_Digital_Input_7(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D7_Digital_Input_7(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0a4_D8_Digital_Input_8(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0a4_D8_Digital_Input_8(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x0a5_D1_Motor_Angle_Electrical(const can_obj_ksu_ev_can_h_t *o,
                                               double *out);
int encode_can_0x0a5_D1_Motor_Angle_Electrical(can_obj_ksu_ev_can_h_t *o,
                                               double in);
int decode_can_0x0a5_D2_Motor_Speed(const can_obj_ksu_ev_can_h_t *o,
                                    int16_t *out);
int encode_can_0x0a5_D2_Motor_Speed(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0a5_D3_Electrical_Output_Frequency(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a5_D3_Electrical_Output_Frequency(can_obj_ksu_ev_can_h_t *o,
                                                    double in);
int decode_can_0x0a5_D4_Delta_Resolver_Filtered(const can_obj_ksu_ev_can_h_t *o,
                                                double *out);
int encode_can_0x0a5_D4_Delta_Resolver_Filtered(can_obj_ksu_ev_can_h_t *o,
                                                double in);

int decode_can_0x0a6_D1_Phase_A_Current(const can_obj_ksu_ev_can_h_t *o,
                                        double *out);
int encode_can_0x0a6_D1_Phase_A_Current(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a6_D2_Phase_B_Current(const can_obj_ksu_ev_can_h_t *o,
                                        double *out);
int encode_can_0x0a6_D2_Phase_B_Current(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a6_D3_Phase_C_Current(const can_obj_ksu_ev_can_h_t *o,
                                        double *out);
int encode_can_0x0a6_D3_Phase_C_Current(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a6_D4_DC_Bus_Current(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a6_D4_DC_Bus_Current(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a7_D1_DC_Bus_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a7_D1_DC_Bus_Voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a7_D2_Output_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a7_D2_Output_Voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a7_D3_VAB_Vd_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a7_D3_VAB_Vd_Voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a7_D4_VBC_Vq_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0a7_D4_VBC_Vq_Voltage(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a8_D1_Flux_Command(const can_obj_ksu_ev_can_h_t *o,
                                     double *out);
int encode_can_0x0a8_D1_Flux_Command(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a8_D2_Flux_Feedback(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x0a8_D2_Flux_Feedback(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a8_D3_Id(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a8_D3_Id(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0a8_D4_Iq(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0a8_D4_Iq(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0a9_D1_Reference_Voltage_1_5(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x0a9_D1_Reference_Voltage_1_5(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x0a9_D2_Reference_Voltage_2_5(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x0a9_D2_Reference_Voltage_2_5(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x0a9_D3_Reference_Voltage_5_0(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x0a9_D3_Reference_Voltage_5_0(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x0a9_D4_Reference_Voltage_12_0(const can_obj_ksu_ev_can_h_t *o,
                                               double *out);
int encode_can_0x0a9_D4_Reference_Voltage_12_0(can_obj_ksu_ev_can_h_t *o,
                                               double in);

int decode_can_0x0aa_D1_VSM_State(const can_obj_ksu_ev_can_h_t *o,
                                  uint16_t *out);
int encode_can_0x0aa_D1_VSM_State(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0aa_D2_Inverter_State(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D2_Inverter_State(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D4_Inverter_Discharge_State(
    const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x0aa_D4_Inverter_Discharge_State(can_obj_ksu_ev_can_h_t *o,
                                                 uint8_t in);
int decode_can_0x0aa_D3_Relay_1_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_1_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D3_Relay_2_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_2_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D3_Relay_3_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_3_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D3_Relay_4_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_4_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D3_Relay_5_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_5_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D3_Relay_6_Status(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0aa_D3_Relay_6_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D4_Inverter_Run_Mode(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0aa_D4_Inverter_Run_Mode(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x0aa_D5_Inverter_Command_Mode(const can_obj_ksu_ev_can_h_t *o,
                                              uint8_t *out);
int encode_can_0x0aa_D5_Inverter_Command_Mode(can_obj_ksu_ev_can_h_t *o,
                                              uint8_t in);
int decode_can_0x0aa_D6_Inverter_Enable_State(const can_obj_ksu_ev_can_h_t *o,
                                              uint8_t *out);
int encode_can_0x0aa_D6_Inverter_Enable_State(can_obj_ksu_ev_can_h_t *o,
                                              uint8_t in);
int decode_can_0x0aa_D6_Inverter_Enable_Lockout(const can_obj_ksu_ev_can_h_t *o,
                                                uint8_t *out);
int encode_can_0x0aa_D6_Inverter_Enable_Lockout(can_obj_ksu_ev_can_h_t *o,
                                                uint8_t in);
int decode_can_0x0aa_D7_Direction_Command(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0aa_D7_Direction_Command(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x0aa_D7_BMS_Active(const can_obj_ksu_ev_can_h_t *o,
                                   uint8_t *out);
int encode_can_0x0aa_D7_BMS_Active(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0aa_D7_BMS_Torque_Limiting(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0aa_D7_BMS_Torque_Limiting(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);

int decode_can_0x0ab_D1_Post_Fault_Lo(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0ab_D1_Post_Fault_Lo(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ab_D2_Post_Fault_Hi(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0ab_D2_Post_Fault_Hi(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ab_D3_Run_Fault_Lo(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0ab_D3_Run_Fault_Lo(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ab_D4_Run_Fault_Hi(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0ab_D4_Run_Fault_Hi(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x0ac_D3_Power_On_Timer(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0ac_D3_Power_On_Timer(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0ac_D1_Commanded_Torque(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0ac_D1_Commanded_Torque(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0ac_D2_Torque_Feedback(const can_obj_ksu_ev_can_h_t *o,
                                        double *out);
int encode_can_0x0ac_D2_Torque_Feedback(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0ad_D1_Modulation_Index(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0ad_D1_Modulation_Index(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0ad_D2_Flux_Weakening_Output(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x0ad_D2_Flux_Weakening_Output(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x0ad_D3_Id_Command(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x0ad_D3_Id_Command(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0ad_D4_Iq_Command(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x0ad_D4_Iq_Command(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0ae_D1_Project_Code_EEP_Ver(const can_obj_ksu_ev_can_h_t *o,
                                             uint16_t *out);
int encode_can_0x0ae_D1_Project_Code_EEP_Ver(can_obj_ksu_ev_can_h_t *o,
                                             uint16_t in);
int decode_can_0x0ae_D2_SW_Version(const can_obj_ksu_ev_can_h_t *o,
                                   uint16_t *out);
int encode_can_0x0ae_D2_SW_Version(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ae_D3_DateCode_MMDD(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0ae_D3_DateCode_MMDD(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ae_D4_DateCode_YYYY(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0ae_D4_DateCode_YYYY(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x0af_D3_Diag_Data_1(const can_obj_ksu_ev_can_h_t *o,
                                    int16_t *out);
int encode_can_0x0af_D3_Diag_Data_1(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0af_D4_Diag_Data_2(const can_obj_ksu_ev_can_h_t *o,
                                    int16_t *out);
int encode_can_0x0af_D4_Diag_Data_2(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0af_D5_Diag_Data_3(const can_obj_ksu_ev_can_h_t *o,
                                    int16_t *out);
int encode_can_0x0af_D5_Diag_Data_3(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0af_D1_Buffer_Record(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x0af_D1_Buffer_Record(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0af_D2_Buffer_Segment(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0af_D2_Buffer_Segment(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x0c0_Torque_Command(const can_obj_ksu_ev_can_h_t *o,
                                    double *out);
int encode_can_0x0c0_Torque_Command(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0c0_Speed_Command(const can_obj_ksu_ev_can_h_t *o,
                                   int16_t *out);
int encode_can_0x0c0_Speed_Command(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0c0_Torque_Limit_Command(const can_obj_ksu_ev_can_h_t *o,
                                          double *out);
int encode_can_0x0c0_Torque_Limit_Command(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0c0_Direction_Command(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0c0_Direction_Command(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c0_Inverter_Enable(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x0c0_Inverter_Enable(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c0_Inverter_Discharge(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0c0_Inverter_Discharge(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c0_Speed_Mode_Enable(const can_obj_ksu_ev_can_h_t *o,
                                       uint8_t *out);
int encode_can_0x0c0_Speed_Mode_Enable(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x0c1_D1_Parameter_Address_Command(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x0c1_D1_Parameter_Address_Command(can_obj_ksu_ev_can_h_t *o,
                                                  uint16_t in);
int decode_can_0x0c1_D3_Data_Command(const can_obj_ksu_ev_can_h_t *o,
                                     int16_t *out);
int encode_can_0x0c1_D3_Data_Command(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0c1_D2_Read_Write_Command(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x0c1_D2_Read_Write_Command(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);

int decode_can_0x0c2_D1_Parameter_Address_Response(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x0c2_D1_Parameter_Address_Response(can_obj_ksu_ev_can_h_t *o,
                                                   uint16_t in);
int decode_can_0x0c2_D3_Data_Response(const can_obj_ksu_ev_can_h_t *o,
                                      int16_t *out);
int encode_can_0x0c2_D3_Data_Response(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0c2_D2_Write_Success(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x0c2_D2_Write_Success(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x0c3_VCU_DISTANCE_TRAVELLED(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x0c3_VCU_DISTANCE_TRAVELLED(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);
int decode_can_0x0c3_VCU_MAX_TORQUE(const can_obj_ksu_ev_can_h_t *o,
                                    uint8_t *out);
int encode_can_0x0c3_VCU_MAX_TORQUE(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_TORQUE_MODE(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x0c3_VCU_TORQUE_MODE(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_STATEMACHINE_STATE(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0c3_VCU_STATEMACHINE_STATE(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x0c3_VCU_IMD_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x0c3_VCU_IMD_OK_HIGH(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_SHUTDOWN_B_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0c3_VCU_SHUTDOWN_B_OK_HIGH(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x0c3_VCU_BMS_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x0c3_VCU_BMS_OK_HIGH(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_SHUTDOWN_C_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0c3_VCU_SHUTDOWN_C_OK_HIGH(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x0c3_VCU_BSPD_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x0c3_VCU_BSPD_OK_HIGH(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_SHUTDOWN_D_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0c3_VCU_SHUTDOWN_D_OK_HIGH(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x0c3_VCU_SOFTWARE_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0c3_VCU_SOFTWARE_OK_HIGH(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x0c3_VCU_SHUTDOWN_E_OK_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0c3_VCU_SHUTDOWN_E_OK_HIGH(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x0c3_VCU_ACCEL_IMPLAUSIBLE(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x0c3_VCU_ACCEL_IMPLAUSIBLE(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);
int decode_can_0x0c3_VCU_BRAKE_IMPLAUSIBLE(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x0c3_VCU_BRAKE_IMPLAUSIBLE(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);
int decode_can_0x0c3_VCU_BRAKE_ACTIVE(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x0c3_VCU_BRAKE_ACTIVE(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_BSPD_CURRENT_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x0c3_VCU_BSPD_CURRENT_HIGH(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);
int decode_can_0x0c3_VCU_BSPD_BRAKE_HIGH(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x0c3_VCU_BSPD_BRAKE_HIGH(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_ACCEL_BRAKE_IMPLAUSIBLE(
    const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x0c3_VCU_ACCEL_BRAKE_IMPLAUSIBLE(can_obj_ksu_ev_can_h_t *o,
                                                 uint8_t in);
int decode_can_0x0c3_VCU_INVERTER_POWERED(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0c3_VCU_INVERTER_POWERED(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x0c3_VCU_ENERGY_METER_PRESENT(const can_obj_ksu_ev_can_h_t *o,
                                              uint8_t *out);
int encode_can_0x0c3_VCU_ENERGY_METER_PRESENT(can_obj_ksu_ev_can_h_t *o,
                                              uint8_t in);
int decode_can_0x0c3_VCU_ACTIVATE_BUZZER(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x0c3_VCU_ACTIVATE_BUZZER(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_SOFTWARE_OK(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x0c3_VCU_SOFTWARE_OK(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c3_VCU_LAUNCH_CONTROL_ACTIVE(const can_obj_ksu_ev_can_h_t *o,
                                               uint8_t *out);
int encode_can_0x0c3_VCU_LAUNCH_CONTROL_ACTIVE(can_obj_ksu_ev_can_h_t *o,
                                               uint8_t in);

int decode_can_0x0c4_APPS1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0c4_APPS1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0c4_APPS2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0c4_APPS2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0c4_BSE1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0c4_BSE1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0c4_STEERING(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0c4_STEERING(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0c6_vcu_rpm_front_left(const can_obj_ksu_ev_can_h_t *o,
                                        int16_t *out);
int encode_can_0x0c6_vcu_rpm_front_left(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x0c6_vcu_rpm_front_right(const can_obj_ksu_ev_can_h_t *o,
                                         int16_t *out);
int encode_can_0x0c6_vcu_rpm_front_right(can_obj_ksu_ev_can_h_t *o, int16_t in);

int decode_can_0x0c7_vcu_apps2_start_threshold(const can_obj_ksu_ev_can_h_t *o,
                                               uint16_t *out);
int encode_can_0x0c7_vcu_apps2_start_threshold(can_obj_ksu_ev_can_h_t *o,
                                               uint16_t in);
int decode_can_0x0c7_vcu_apps1_end_threshold(const can_obj_ksu_ev_can_h_t *o,
                                             uint16_t *out);
int encode_can_0x0c7_vcu_apps1_end_threshold(can_obj_ksu_ev_can_h_t *o,
                                             uint16_t in);
int decode_can_0x0c7_vcu_brake_active_threshold(const can_obj_ksu_ev_can_h_t *o,
                                                uint16_t *out);
int encode_can_0x0c7_vcu_brake_active_threshold(can_obj_ksu_ev_can_h_t *o,
                                                uint16_t in);
int decode_can_0x0c7_vcu_apps2_end_threshold(const can_obj_ksu_ev_can_h_t *o,
                                             uint16_t *out);
int encode_can_0x0c7_vcu_apps2_end_threshold(can_obj_ksu_ev_can_h_t *o,
                                             uint16_t in);
int decode_can_0x0c7_vcu_apps1_ov_threshold(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x0c7_vcu_apps1_ov_threshold(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);
int decode_can_0x0c7_vcu_apps1_uv_threshold(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x0c7_vcu_apps1_uv_threshold(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);
int decode_can_0x0c7_vcu_apps2_ov_threshold(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x0c7_vcu_apps2_ov_threshold(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);
int decode_can_0x0c7_vcu_apps2_uv_threshold(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x0c7_vcu_apps2_uv_threshold(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);
int decode_can_0x0c7_vcu_apps1_start_threshold(const can_obj_ksu_ev_can_h_t *o,
                                               uint16_t *out);
int encode_can_0x0c7_vcu_apps1_start_threshold(can_obj_ksu_ev_can_h_t *o,
                                               uint16_t in);
int decode_can_0x0c7_vcu_pedals_settings_MUX(const can_obj_ksu_ev_can_h_t *o,
                                             uint8_t *out);
int encode_can_0x0c7_vcu_pedals_settings_MUX(can_obj_ksu_ev_can_h_t *o,
                                             uint8_t in);

int decode_can_0x0c8_vcu_fw_version(const can_obj_ksu_ev_can_h_t *o,
                                    uint32_t *out);
int encode_can_0x0c8_vcu_fw_version(can_obj_ksu_ev_can_h_t *o, uint32_t in);
int decode_can_0x0c8_vcu_on_time_seconds(const can_obj_ksu_ev_can_h_t *o,
                                         uint16_t *out);
int encode_can_0x0c8_vcu_on_time_seconds(can_obj_ksu_ev_can_h_t *o,
                                         uint16_t in);
int decode_can_0x0c8_vcu_project_on_main(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x0c8_vcu_project_on_main(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0c8_vcu_project_is_dirty(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0c8_vcu_project_is_dirty(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);

int decode_can_0x0c9_VCU_GLV_CURRENT(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0c9_VCU_GLV_CURRENT(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0c9_VCU_GLV_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0c9_VCU_GLV_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0c9_VCU_BSPD_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0c9_VCU_BSPD_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0c9_VCU_5V_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                    uint16_t *out);
int encode_can_0x0c9_VCU_5V_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x0ca_VCU_SDC_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0ca_VCU_SDC_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ca_VCU_SDC_CURRENT(const can_obj_ksu_ev_can_h_t *o,
                                     uint16_t *out);
int encode_can_0x0ca_VCU_SDC_CURRENT(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ca_VCU_AIN9_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x0ca_VCU_AIN9_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x0ca_VCU_AIN10_VOLTAGE(const can_obj_ksu_ev_can_h_t *o,
                                       uint16_t *out);
int encode_can_0x0ca_VCU_AIN10_VOLTAGE(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x0cb_vcu_launchcontrol_elapsed_time(
    const can_obj_ksu_ev_can_h_t *o, uint32_t *out);
int encode_can_0x0cb_vcu_launchcontrol_elapsed_time(can_obj_ksu_ev_can_h_t *o,
                                                    uint32_t in);
int decode_can_0x0cb_vcu_launchcontrol_outputtorqueco(
    const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x0cb_vcu_launchcontrol_outputtorqueco(can_obj_ksu_ev_can_h_t *o,
                                                      int16_t in);
int decode_can_0x0cb_vcu_launchcontrol_state(const can_obj_ksu_ev_can_h_t *o,
                                             uint8_t *out);
int encode_can_0x0cb_vcu_launchcontrol_state(can_obj_ksu_ev_can_h_t *o,
                                             uint8_t in);
int decode_can_0x0cb_vcu_launchcontrol_type(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x0cb_vcu_launchcontrol_type(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);

int decode_can_0x0cc_vcu_apps1_travel(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x0cc_vcu_apps1_travel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0cc_vcu_apps2_travel(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x0cc_vcu_apps2_travel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0cc_vcu_bse1_travel(const can_obj_ksu_ev_can_h_t *o,
                                     double *out);
int encode_can_0x0cc_vcu_bse1_travel(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0cd_vcu_launchcontrol_release_countd(
    const can_obj_ksu_ev_can_h_t *o, uint32_t *out);
int encode_can_0x0cd_vcu_launchcontrol_release_countd(can_obj_ksu_ev_can_h_t *o,
                                                      uint32_t in);
int decode_can_0x0cd_vcu_release_delay(const can_obj_ksu_ev_can_h_t *o,
                                       uint32_t *out);
int encode_can_0x0cd_vcu_release_delay(can_obj_ksu_ev_can_h_t *o, uint32_t in);

int decode_can_0x0ce_vcu_motor_energy_wh(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0ce_vcu_motor_energy_wh(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0ce_vcu_motor_efficiency_instantaneo(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0ce_vcu_motor_efficiency_instantaneo(can_obj_ksu_ev_can_h_t *o,
                                                      double in);
int decode_can_0x0ce_vcu_motor_distance_meters(const can_obj_ksu_ev_can_h_t *o,
                                               uint16_t *out);
int encode_can_0x0ce_vcu_motor_distance_meters(can_obj_ksu_ev_can_h_t *o,
                                               uint16_t in);
int decode_can_0x0ce_vcu_motor_efficiency_kmkwh(const can_obj_ksu_ev_can_h_t *o,
                                                double *out);
int encode_can_0x0ce_vcu_motor_efficiency_kmkwh(can_obj_ksu_ev_can_h_t *o,
                                                double in);

int decode_can_0x0cf_vcu_wheelspeed_energy_wh(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x0cf_vcu_wheelspeed_energy_wh(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x0cf_vcu_wheelspeed_efficiency_instan(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0cf_vcu_wheelspeed_efficiency_instan(can_obj_ksu_ev_can_h_t *o,
                                                      double in);
int decode_can_0x0cf_vcu_wheelspeed_distance_meters(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x0cf_vcu_wheelspeed_distance_meters(can_obj_ksu_ev_can_h_t *o,
                                                    uint16_t in);
int decode_can_0x0cf_vcu_wheelspeed_efficiency_kmkwh(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0cf_vcu_wheelspeed_efficiency_kmkwh(can_obj_ksu_ev_can_h_t *o,
                                                     double in);

int decode_can_0x0d0_vcu_lifetime_ontime(const can_obj_ksu_ev_can_h_t *o,
                                         uint32_t *out);
int encode_can_0x0d0_vcu_lifetime_ontime(can_obj_ksu_ev_can_h_t *o,
                                         uint32_t in);
int decode_can_0x0d0_vcu_lifetime_distance(const can_obj_ksu_ev_can_h_t *o,
                                           uint32_t *out);
int encode_can_0x0d0_vcu_lifetime_distance(can_obj_ksu_ev_can_h_t *o,
                                           uint32_t in);

int decode_can_0x0d1_vcu_tractioncontrol_elapsed_time(
    const can_obj_ksu_ev_can_h_t *o, uint32_t *out);
int encode_can_0x0d1_vcu_tractioncontrol_elapsed_time(can_obj_ksu_ev_can_h_t *o,
                                                      uint32_t in);
int decode_can_0x0d1_vcu_tractioncontrol_outputtorque(
    const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x0d1_vcu_tractioncontrol_outputtorque(can_obj_ksu_ev_can_h_t *o,
                                                      int16_t in);
int decode_can_0x0d1_vcu_tractioncontrol_state(const can_obj_ksu_ev_can_h_t *o,
                                               uint8_t *out);
int encode_can_0x0d1_vcu_tractioncontrol_state(can_obj_ksu_ev_can_h_t *o,
                                               uint8_t in);
int decode_can_0x0d1_vcu_tractioncontrol_type(const can_obj_ksu_ev_can_h_t *o,
                                              uint8_t *out);
int encode_can_0x0d1_vcu_tractioncontrol_type(can_obj_ksu_ev_can_h_t *o,
                                              uint8_t in);

int decode_can_0x0d2_vcu_vectornav_energy_wh(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x0d2_vcu_vectornav_energy_wh(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x0d2_vcu_vectornav_efficiency_instant(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0d2_vcu_vectornav_efficiency_instant(can_obj_ksu_ev_can_h_t *o,
                                                      double in);
int decode_can_0x0d2_vcu_vectornav_distance_meters(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x0d2_vcu_vectornav_distance_meters(can_obj_ksu_ev_can_h_t *o,
                                                   uint16_t in);
int decode_can_0x0d2_vcu_vectornav_efficiency_kmkwh(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0d2_vcu_vectornav_efficiency_kmkwh(can_obj_ksu_ev_can_h_t *o,
                                                    double in);

int decode_can_0x0d3_vcu_wsfl_ah(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0d3_vcu_wsfl_ah(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0d3_vcu_motor_ah(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0d3_vcu_motor_ah(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0d3_vcu_vnav_ah(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x0d3_vcu_vnav_ah(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0d4_vcu_front_rpm_avg(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x0d4_vcu_front_rpm_avg(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0d4_vcu_rear_rpm_avg(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x0d4_vcu_rear_rpm_avg(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x0d4_vcu_calculated_slip(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x0d4_vcu_calculated_slip(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x0d5_vcu_power_limit(const can_obj_ksu_ev_can_h_t *o,
                                     uint32_t *out);
int encode_can_0x0d5_vcu_power_limit(can_obj_ksu_ev_can_h_t *o, uint32_t in);

int decode_can_0x0eb_dash_button1status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button1status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0eb_dash_button2status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button2status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0eb_dash_button3status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button3status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0eb_dash_button4status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button4status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0eb_dash_button5status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button5status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x0eb_dash_button6status(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x0eb_dash_button6status(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x0ec_dash_fw_version(const can_obj_ksu_ev_can_h_t *o,
                                     uint32_t *out);
int encode_can_0x0ec_dash_fw_version(can_obj_ksu_ev_can_h_t *o, uint32_t in);
int decode_can_0x0ec_dash_on_time_seconds(const can_obj_ksu_ev_can_h_t *o,
                                          uint16_t *out);
int encode_can_0x0ec_dash_on_time_seconds(can_obj_ksu_ev_can_h_t *o,
                                          uint16_t in);
int decode_can_0x0ec_dash_project_on_main(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x0ec_dash_project_on_main(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x0ec_dash_project_is_dirty(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x0ec_dash_project_is_dirty(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);

int decode_can_0x1d5_D3_HV_Input_Current(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x1d5_D3_HV_Input_Current(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d5_D6_14V_Monitor(const can_obj_ksu_ev_can_h_t *o,
                                    uint8_t *out);
int encode_can_0x1d5_D6_14V_Monitor(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d5_D8_14V_Current_Monitor(const can_obj_ksu_ev_can_h_t *o,
                                            uint8_t *out);
int encode_can_0x1d5_D8_14V_Current_Monitor(can_obj_ksu_ev_can_h_t *o,
                                            uint8_t in);
int decode_can_0x1d5_D5_DTC_Index(const can_obj_ksu_ev_can_h_t *o,
                                  uint8_t *out);
int encode_can_0x1d5_D5_DTC_Index(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d5_D4_DTC_Status(const can_obj_ksu_ev_can_h_t *o,
                                   uint8_t *out);
int encode_can_0x1d5_D4_DTC_Status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d5_D1_HV_Input_Current_Sensor_Valid(
    const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x1d5_D1_HV_Input_Current_Sensor_Valid(can_obj_ksu_ev_can_h_t *o,
                                                      uint8_t in);
int decode_can_0x1d5_D2_14V_Master_Fault(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x1d5_D2_14V_Master_Fault(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d5_D7_14V_Conditional(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x1d5_D7_14V_Conditional(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x1d7_D1_ID_Byte(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x1d7_D1_ID_Byte(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x1d7_D2_Setpoint_Calc(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x1d7_D2_Setpoint_Calc(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x1f4_evelogger_vectornav_time(const can_obj_ksu_ev_can_h_t *o,
                                              uint64_t *out);
int encode_can_0x1f4_evelogger_vectornav_time(can_obj_ksu_ev_can_h_t *o,
                                              uint64_t in);

int decode_can_0x1f5_evelogger_vectornav_yaw(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f5_evelogger_vectornav_yaw(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x1f5_evelogger_vectornav_roll(const can_obj_ksu_ev_can_h_t *o,
                                              double *out);
int encode_can_0x1f5_evelogger_vectornav_roll(can_obj_ksu_ev_can_h_t *o,
                                              double in);
int decode_can_0x1f5_evelogger_vectornav_pitch(const can_obj_ksu_ev_can_h_t *o,
                                               double *out);
int encode_can_0x1f5_evelogger_vectornav_pitch(can_obj_ksu_ev_can_h_t *o,
                                               double in);

int decode_can_0x1f6_evelogger_vectornav_W_x(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f6_evelogger_vectornav_W_x(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x1f6_evelogger_vectornav_W_y(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f6_evelogger_vectornav_W_y(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x1f6_evelogger_vectornav_W_z(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f6_evelogger_vectornav_W_z(can_obj_ksu_ev_can_h_t *o,
                                             double in);

int decode_can_0x1f7_evelogger_vectornav_latitude(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x1f7_evelogger_vectornav_latitude(can_obj_ksu_ev_can_h_t *o,
                                                  double in);
int decode_can_0x1f7_evelogger_vectornav_longitude(
    const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x1f7_evelogger_vectornav_longitude(can_obj_ksu_ev_can_h_t *o,
                                                   double in);

int decode_can_0x1f8_evelogger_vectornav_v_n(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f8_evelogger_vectornav_v_n(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x1f8_evelogger_vectornav_v_e(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f8_evelogger_vectornav_v_e(can_obj_ksu_ev_can_h_t *o,
                                             double in);
int decode_can_0x1f8_evelogger_vectornav_v_d(const can_obj_ksu_ev_can_h_t *o,
                                             double *out);
int encode_can_0x1f8_evelogger_vectornav_v_d(can_obj_ksu_ev_can_h_t *o,
                                             double in);

int decode_can_0x1f9_evelogger_vectornav_accelX(const can_obj_ksu_ev_can_h_t *o,
                                                double *out);
int encode_can_0x1f9_evelogger_vectornav_accelX(can_obj_ksu_ev_can_h_t *o,
                                                double in);
int decode_can_0x1f9_evelogger_vectornav_accelY(const can_obj_ksu_ev_can_h_t *o,
                                                double *out);
int encode_can_0x1f9_evelogger_vectornav_accelY(can_obj_ksu_ev_can_h_t *o,
                                                double in);
int decode_can_0x1f9_evelogger_vectornav_accelZ(const can_obj_ksu_ev_can_h_t *o,
                                                double *out);
int encode_can_0x1f9_evelogger_vectornav_accelZ(can_obj_ksu_ev_can_h_t *o,
                                                double in);

int decode_can_0x202_D1_Max_Discharge_Current(const can_obj_ksu_ev_can_h_t *o,
                                              uint16_t *out);
int encode_can_0x202_D1_Max_Discharge_Current(can_obj_ksu_ev_can_h_t *o,
                                              uint16_t in);
int decode_can_0x202_D2_Max_Charge_Current(const can_obj_ksu_ev_can_h_t *o,
                                           uint16_t *out);
int encode_can_0x202_D2_Max_Charge_Current(can_obj_ksu_ev_can_h_t *o,
                                           uint16_t in);

int decode_can_0x258_acu_imd_pwm_frequency(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x258_acu_imd_pwm_frequency(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);
int decode_can_0x258_acu_imd_pwm_duty(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x258_acu_imd_pwm_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x258_acu_imd_relay_state(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x258_acu_imd_relay_state(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x258_acu_bms_relay_state(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x258_acu_bms_relay_state(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x258_acu_imd_gpio_state(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x258_acu_imd_gpio_state(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x258_acu_bms_gpio_state(const can_obj_ksu_ev_can_h_t *o,
                                        uint8_t *out);
int encode_can_0x258_acu_bms_gpio_state(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x259_acu_glv_voltage(const can_obj_ksu_ev_can_h_t *o,
                                     double *out);
int encode_can_0x259_acu_glv_voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x259_acu_sdc_voltage(const can_obj_ksu_ev_can_h_t *o,
                                     double *out);
int encode_can_0x259_acu_sdc_voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x259_acu_5v_voltage(const can_obj_ksu_ev_can_h_t *o,
                                    double *out);
int encode_can_0x259_acu_5v_voltage(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x25a_acu_fw_version(const can_obj_ksu_ev_can_h_t *o,
                                    uint32_t *out);
int encode_can_0x25a_acu_fw_version(can_obj_ksu_ev_can_h_t *o, uint32_t in);
int decode_can_0x25a_acu_on_time_seconds(const can_obj_ksu_ev_can_h_t *o,
                                         uint16_t *out);
int encode_can_0x25a_acu_on_time_seconds(can_obj_ksu_ev_can_h_t *o,
                                         uint16_t in);
int decode_can_0x25a_acu_project_on_main(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x25a_acu_project_on_main(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x25a_acu_project_is_dirty(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x25a_acu_project_is_dirty(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);

int decode_can_0x384_cornernode_fl_shockpot(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x384_cornernode_fl_shockpot(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);

int decode_can_0x385_cornernode_fr_shockpot(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x385_cornernode_fr_shockpot(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);

int decode_can_0x386_cornernode_rl_shockpot(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x386_cornernode_rl_shockpot(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);

int decode_can_0x387_cornernode_rr_shockpot(const can_obj_ksu_ev_can_h_t *o,
                                            uint16_t *out);
int encode_can_0x387_cornernode_rr_shockpot(can_obj_ksu_ev_can_h_t *o,
                                            uint16_t in);

int decode_can_0x388_cornernode_fl_wheelspeed(const can_obj_ksu_ev_can_h_t *o,
                                              uint16_t *out);
int encode_can_0x388_cornernode_fl_wheelspeed(can_obj_ksu_ev_can_h_t *o,
                                              uint16_t in);

int decode_can_0x389_cornernode_fr_wheelspeed(const can_obj_ksu_ev_can_h_t *o,
                                              uint16_t *out);
int encode_can_0x389_cornernode_fr_wheelspeed(can_obj_ksu_ev_can_h_t *o,
                                              uint16_t in);

int decode_can_0x38a_cornernode_rl_wheelspeed(const can_obj_ksu_ev_can_h_t *o,
                                              uint16_t *out);
int encode_can_0x38a_cornernode_rl_wheelspeed(can_obj_ksu_ev_can_h_t *o,
                                              uint16_t in);

int decode_can_0x38b_cornernode_rr_wheelspeed(const can_obj_ksu_ev_can_h_t *o,
                                              uint16_t *out);
int encode_can_0x38b_cornernode_rr_wheelspeed(can_obj_ksu_ev_can_h_t *o,
                                              uint16_t in);

int decode_can_0x38c_cornernode_fl_tiretemp(const can_obj_ksu_ev_can_h_t *o,
                                            uint64_t *out);
int encode_can_0x38c_cornernode_fl_tiretemp(can_obj_ksu_ev_can_h_t *o,
                                            uint64_t in);

int decode_can_0x38d_cornernode_fr_tiretemp(const can_obj_ksu_ev_can_h_t *o,
                                            uint64_t *out);
int encode_can_0x38d_cornernode_fr_tiretemp(can_obj_ksu_ev_can_h_t *o,
                                            uint64_t in);

int decode_can_0x38e_cornernode_rl_tiretemp(const can_obj_ksu_ev_can_h_t *o,
                                            uint64_t *out);
int encode_can_0x38e_cornernode_rl_tiretemp(can_obj_ksu_ev_can_h_t *o,
                                            uint64_t in);

int decode_can_0x38f_cornernode_rr_tiretemp(const can_obj_ksu_ev_can_h_t *o,
                                            uint64_t *out);
int encode_can_0x38f_cornernode_rr_tiretemp(can_obj_ksu_ev_can_h_t *o,
                                            uint64_t in);

int decode_can_0x390_cornernode_front_brakepressure(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x390_cornernode_front_brakepressure(can_obj_ksu_ev_can_h_t *o,
                                                    uint16_t in);

int decode_can_0x391_cornernode_rear_brakepressure(
    const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x391_cornernode_rear_brakepressure(can_obj_ksu_ev_can_h_t *o,
                                                   uint16_t in);

int decode_can_0x44c_omni_fw_version(const can_obj_ksu_ev_can_h_t *o,
                                     uint32_t *out);
int encode_can_0x44c_omni_fw_version(can_obj_ksu_ev_can_h_t *o, uint32_t in);
int decode_can_0x44c_omni_on_time_seconds(const can_obj_ksu_ev_can_h_t *o,
                                          uint16_t *out);
int encode_can_0x44c_omni_on_time_seconds(can_obj_ksu_ev_can_h_t *o,
                                          uint16_t in);
int decode_can_0x44c_omni_project_on_main(const can_obj_ksu_ev_can_h_t *o,
                                          uint8_t *out);
int encode_can_0x44c_omni_project_on_main(can_obj_ksu_ev_can_h_t *o,
                                          uint8_t in);
int decode_can_0x44c_omni_project_is_dirty(const can_obj_ksu_ev_can_h_t *o,
                                           uint8_t *out);
int encode_can_0x44c_omni_project_is_dirty(can_obj_ksu_ev_can_h_t *o,
                                           uint8_t in);

int decode_can_0x44d_omni_accel_x(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44d_omni_accel_x(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44d_omni_accel_y(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44d_omni_accel_y(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44d_omni_accel_z(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44d_omni_accel_z(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x44e_omni_gyro_x(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44e_omni_gyro_x(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44e_omni_gyro_y(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44e_omni_gyro_y(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44e_omni_gyro_z(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44e_omni_gyro_z(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x44f_omni_heading(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44f_omni_heading(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44f_omni_pitch(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44f_omni_pitch(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x44f_omni_roll(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x44f_omni_roll(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x450_omni_shockpot_fl(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x450_omni_shockpot_fl(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x450_omni_shockpot_fr(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x450_omni_shockpot_fr(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x450_omni_shockpot_rl(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x450_omni_shockpot_rl(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x450_omni_shockpot_rr(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x450_omni_shockpot_rr(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x451_omni_steering(const can_obj_ksu_ev_can_h_t *o,
                                   uint16_t *out);
int encode_can_0x451_omni_steering(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x452_omni_gps_latitude(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x452_omni_gps_latitude(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x452_omni_gps_longitude(const can_obj_ksu_ev_can_h_t *o,
                                        double *out);
int encode_can_0x452_omni_gps_longitude(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f0_seconds(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x5f0_seconds(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x5f0_pw1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f0_pw1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f0_pw2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f0_pw2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f0_rpm(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x5f0_rpm(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x5f1_adv_deg(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f1_adv_deg(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f1_squirt(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5f1_squirt(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5f1_engine(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5f1_engine(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5f1_afrtgt1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f1_afrtgt1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f1_afrtgt2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f1_afrtgt2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f1_wbo2_en1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5f1_wbo2_en1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5f1_wbo2_en2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5f1_wbo2_en2(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x5f2_baro(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f2_baro(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f2_map(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f2_map(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f2_mat(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f2_mat(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f2_clt(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f2_clt(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f3_tps(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f3_tps(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f3_batt(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f3_batt(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f3_afr1_old(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f3_afr1_old(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f3_afr2_old(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f3_afr2_old(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f4_knock(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f4_knock(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f4_egocor1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f4_egocor1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f4_egocor2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f4_egocor2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f4_aircor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f4_aircor(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f5_warmcor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f5_warmcor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f5_tpsaccel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f5_tpsaccel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f5_tpsfuelcut(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f5_tpsfuelcut(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f5_barocor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f5_barocor(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f6_totalcor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f6_totalcor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f6_ve1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f6_ve1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f6_ve2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f6_ve2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f6_iacstep(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x5f6_iacstep(can_obj_ksu_ev_can_h_t *o, int16_t in);

int decode_can_0x5f7_cold_adv_deg(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f7_cold_adv_deg(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f7_TPSdot(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f7_TPSdot(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f7_MAPdot(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x5f7_MAPdot(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x5f7_RPMdot(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f7_RPMdot(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f8_MAFload(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f8_MAFload(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f8_fuelload(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f8_fuelload(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f8_fuelcor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f8_fuelcor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f8_MAF(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f8_MAF(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5f9_egoV1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f9_egoV1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f9_egoV2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f9_egoV2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f9_dwell(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f9_dwell(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5f9_dwell_trl(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5f9_dwell_trl(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5fa_status5(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x5fa_status5(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x5fa_status1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5fa_status2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status2(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5fa_status3(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status3(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5fa_status4(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status4(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5fa_status6(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status6(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x5fa_status7(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x5fa_status7(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x5fb_fuelload2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fb_fuelload2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fb_ignload(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fb_ignload(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fb_ignload2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fb_ignload2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fb_airtemp(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fb_airtemp(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5fc_wallfuel1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fc_wallfuel1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fc_wallfuel2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fc_wallfuel2(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5fd_sensors1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fd_sensors1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fd_sensors2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fd_sensors2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fd_sensors3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fd_sensors3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fd_sensors4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fd_sensors4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5fe_sensors5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fe_sensors5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fe_sensors6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fe_sensors6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fe_sensors7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fe_sensors7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5fe_sensors8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5fe_sensors8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x5ff_sensors9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5ff_sensors9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5ff_sensors10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5ff_sensors10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5ff_sensors11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5ff_sensors11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x5ff_sensors12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x5ff_sensors12(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x600_sensors13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x600_sensors13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x600_sensors14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x600_sensors14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x600_sensors15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x600_sensors15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x600_sensors16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x600_sensors16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x601_boost_targ_1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x601_boost_targ_1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x601_boost_targ_2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x601_boost_targ_2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x601_maf_volts(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x601_maf_volts(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x601_boostduty(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x601_boostduty(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x601_boostduty2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x601_boostduty2(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x602_pwseq1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x602_pwseq1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x602_pwseq2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x602_pwseq2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x602_pwseq3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x602_pwseq3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x602_pwseq4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x602_pwseq4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x603_pwseq5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x603_pwseq5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x603_pwseq6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x603_pwseq6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x603_pwseq7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x603_pwseq7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x603_pwseq8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x603_pwseq8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x604_pwseq9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x604_pwseq9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x604_pwseq10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x604_pwseq10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x604_pwseq11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x604_pwseq11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x604_pwseq12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x604_pwseq12(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x605_pwseq13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x605_pwseq13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x605_pwseq14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x605_pwseq14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x605_pwseq15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x605_pwseq15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x605_pwseq16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x605_pwseq16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x606_egt1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x606_egt1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x606_egt2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x606_egt2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x606_egt3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x606_egt3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x606_egt4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x606_egt4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x607_egt5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x607_egt5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x607_egt6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x607_egt6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x607_egt7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x607_egt7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x607_egt8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x607_egt8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x608_egt9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x608_egt9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x608_egt10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x608_egt10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x608_egt11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x608_egt11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x608_egt12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x608_egt12(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x609_egt13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x609_egt13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x609_egt14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x609_egt14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x609_egt15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x609_egt15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x609_egt16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x609_egt16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x60a_nitrous_timer_out(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x60a_nitrous_timer_out(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60a_n2o_addfuel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60a_n2o_addfuel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60a_n2o_retard(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60a_n2o_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60a_nitrous1_duty(const can_obj_ksu_ev_can_h_t *o,
                                   uint8_t *out);
int encode_can_0x60a_nitrous1_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x60a_nitrous2_duty(const can_obj_ksu_ev_can_h_t *o,
                                   uint8_t *out);
int encode_can_0x60a_nitrous2_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x60b_canpwmin1(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x60b_canpwmin1(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x60b_canpwmin2(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x60b_canpwmin2(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x60b_canpwmin3(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x60b_canpwmin3(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x60b_canpwmin4(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x60b_canpwmin4(can_obj_ksu_ev_can_h_t *o, int16_t in);

int decode_can_0x60c_cl_idle_targ_rpm(const can_obj_ksu_ev_can_h_t *o,
                                      uint16_t *out);
int encode_can_0x60c_cl_idle_targ_rpm(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x60c_tpsadc(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x60c_tpsadc(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x60c_eaeload(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60c_eaeload(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60c_afrload(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60c_afrload(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x60d_EAEfcor1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60d_EAEfcor1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60d_EAEfcor2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60d_EAEfcor2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60d_VSS1dot(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60d_VSS1dot(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60d_VSS2dot(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60d_VSS2dot(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x60e_accelx(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60e_accelx(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60e_accely(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60e_accely(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60e_accelz(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60e_accelz(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60e_stream_level(const can_obj_ksu_ev_can_h_t *o,
                                  uint8_t *out);
int encode_can_0x60e_stream_level(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x60e_water_duty(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x60e_water_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x60f_AFR1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR4(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x60f_AFR8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x60f_AFR8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x610_AFR9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR12(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x610_AFR16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x610_AFR16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x611_duty_pwm1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_duty_pwm2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm2(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_duty_pwm3(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm3(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_duty_pwm4(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm4(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_duty_pwm5(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm5(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_duty_pwm6(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_duty_pwm6(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_gear(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_gear(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x611_status8(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x611_status8(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x612_EGOv1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x612_EGOv1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x612_EGOv2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x612_EGOv2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x612_EGOv3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x612_EGOv3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x612_EGOv4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x612_EGOv4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x613_EGOv5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x613_EGOv5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x613_EGOv6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x613_EGOv6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x613_EGOv7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x613_EGOv7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x613_EGOv8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x613_EGOv8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x614_EGOv9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x614_EGOv9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x614_EGOv10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x614_EGOv10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x614_EGOv11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x614_EGOv11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x614_EGOv12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x614_EGOv12(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x615_EGOv13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x615_EGOv13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x615_EGOv14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x615_EGOv14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x615_EGOv15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x615_EGOv15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x615_EGOv16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x615_EGOv16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x616_EGOcor1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x616_EGOcor1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x616_EGOcor2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x616_EGOcor2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x616_EGOcor3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x616_EGOcor3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x616_EGOcor4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x616_EGOcor4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x617_EGOcor5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x617_EGOcor5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x617_EGOcor6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x617_EGOcor6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x617_EGOcor7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x617_EGOcor7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x617_EGOcor8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x617_EGOcor8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x618_EGOcor9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x618_EGOcor9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x618_EGOcor10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x618_EGOcor10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x618_EGOcor11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x618_EGOcor11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x618_EGOcor12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x618_EGOcor12(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x619_EGOcor13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x619_EGOcor13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x619_EGOcor14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x619_EGOcor14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x619_EGOcor15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x619_EGOcor15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x619_EGOcor16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x619_EGOcor16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x61a_VSS1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61a_VSS1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61a_VSS2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61a_VSS2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61a_VSS3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61a_VSS3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61a_VSS4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61a_VSS4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x61b_sd_filenum(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x61b_sd_filenum(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x61b_synccnt(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x61b_synccnt(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x61b_syncreason(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x61b_syncreason(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x61b_sd_error(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x61b_sd_error(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x61b_sd_phase(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x61b_sd_phase(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x61b_sd_status(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x61b_sd_status(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x61b_timing_err(const can_obj_ksu_ev_can_h_t *o, int8_t *out);
int encode_can_0x61b_timing_err(can_obj_ksu_ev_can_h_t *o, int8_t in);

int decode_can_0x61c_vvt_ang1(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61c_vvt_ang1(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61c_vvt_ang2(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61c_vvt_ang2(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61c_vvt_ang3(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61c_vvt_ang3(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61c_vvt_ang4(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61c_vvt_ang4(can_obj_ksu_ev_can_h_t *o, int16_t in);

int decode_can_0x61d_vvt_target1(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61d_vvt_target1(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61d_vvt_target2(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61d_vvt_target2(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61d_vvt_target3(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61d_vvt_target3(can_obj_ksu_ev_can_h_t *o, int16_t in);
int decode_can_0x61d_vvt_target4(const can_obj_ksu_ev_can_h_t *o, int16_t *out);
int encode_can_0x61d_vvt_target4(can_obj_ksu_ev_can_h_t *o, int16_t in);

int decode_can_0x61e_inj_timing_pri(const can_obj_ksu_ev_can_h_t *o,
                                    double *out);
int encode_can_0x61e_inj_timing_pri(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61e_inj_timing_sec(const can_obj_ksu_ev_can_h_t *o,
                                    double *out);
int encode_can_0x61e_inj_timing_sec(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61e_vvt_duty1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61e_vvt_duty1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61e_vvt_duty2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61e_vvt_duty2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61e_vvt_duty3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61e_vvt_duty3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61e_vvt_duty4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61e_vvt_duty4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x61f_fuel_pct(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61f_fuel_pct(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61f_tps_accel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61f_tps_accel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61f_SS1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61f_SS1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x61f_SS2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x61f_SS2(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x620_knock_cyl1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl4(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl5(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl5(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl6(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl6(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl7(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl7(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x620_knock_cyl8(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x620_knock_cyl8(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x621_knock_cyl9(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl9(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl10(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl10(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl11(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl11(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl12(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl12(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl13(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl13(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl14(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl14(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl15(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl15(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x621_knock_cyl16(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x621_knock_cyl16(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x622_map_accel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x622_map_accel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x622_total_accel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x622_total_accel(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x622_launch_timer(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x622_launch_timer(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x622_launch_retard(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x622_launch_retard(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x623_porta(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_porta(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_portb(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_portb(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_porteh(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_porteh(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_portk(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_portk(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_portmj(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_portmj(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_portp(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_portp(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_portt(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x623_portt(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x623_cel_errorcode(const can_obj_ksu_ev_can_h_t *o,
                                   uint8_t *out);
int encode_can_0x623_cel_errorcode(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x624_fuelflow(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x624_fuelflow(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x624_fuelcons(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x624_fuelcons(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x624_canin1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x624_canin1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x624_canin2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x624_canin2(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x624_canout(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x624_canout(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x624_knk_rtd(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x624_knk_rtd(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x625_fuel_press1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x625_fuel_press1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x625_fuel_press2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x625_fuel_press2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x625_fuel_temp1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x625_fuel_temp1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x625_fuel_temp2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x625_fuel_temp2(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x626_batt_cur(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x626_batt_cur(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x626_cel_status(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x626_cel_status(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x626_fp_duty(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x626_fp_duty(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x626_alt_duty(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x626_alt_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x626_load_duty(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x626_load_duty(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x626_alt_targv(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x626_alt_targv(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x627_looptime(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x627_looptime(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x627_fueltemp_cor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x627_fueltemp_cor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x627_fuelpress_cor(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x627_fuelpress_cor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x627_ltt_cor(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x627_ltt_cor(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x627_sp1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x627_sp1(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x628_tc_retard(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x628_tc_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x628_cel_retard(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x628_cel_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x628_fc_retard(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x628_fc_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x628_als_addfuel(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x628_als_addfuel(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x629_base_advance(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x629_base_advance(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x629_idle_cor_advance(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x629_idle_cor_advance(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x629_mat_retard(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x629_mat_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x629_flex_advance(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x629_flex_advance(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x62a_adv1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62a_adv1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62a_adv2(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62a_adv2(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62a_adv3(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62a_adv3(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62a_adv4(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62a_adv4(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x62b_revlim_retard(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x62b_revlim_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62b_als_timing(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62b_als_timing(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62b_ext_advance(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62b_ext_advance(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62b_deadtime1(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62b_deadtime1(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x62c_launch_timing(const can_obj_ksu_ev_can_h_t *o,
                                   double *out);
int encode_can_0x62c_launch_timing(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62c_step3_timing(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62c_step3_timing(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62c_vsslaunch_retard(const can_obj_ksu_ev_can_h_t *o,
                                      double *out);
int encode_can_0x62c_vsslaunch_retard(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62c_cel_status2(const can_obj_ksu_ev_can_h_t *o,
                                 uint16_t *out);
int encode_can_0x62c_cel_status2(can_obj_ksu_ev_can_h_t *o, uint16_t in);

int decode_can_0x62d_gps_latmmin(const can_obj_ksu_ev_can_h_t *o,
                                 uint16_t *out);
int encode_can_0x62d_gps_latmmin(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62d_gps_lonmmin(const can_obj_ksu_ev_can_h_t *o,
                                 uint16_t *out);
int encode_can_0x62d_gps_lonmmin(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62d_gps_latdeg(const can_obj_ksu_ev_can_h_t *o, int8_t *out);
int encode_can_0x62d_gps_latdeg(can_obj_ksu_ev_can_h_t *o, int8_t in);
int decode_can_0x62d_gps_latmin(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x62d_gps_latmin(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x62d_gps_londeg(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x62d_gps_londeg(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x62d_gps_lonmin(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x62d_gps_lonmin(can_obj_ksu_ev_can_h_t *o, uint8_t in);

int decode_can_0x62e_gps_altm(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x62e_gps_altm(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62e_gps_speed(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62e_gps_speed(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62e_gps_course(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x62e_gps_course(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62e_gps_altk(const can_obj_ksu_ev_can_h_t *o, int8_t *out);
int encode_can_0x62e_gps_altk(can_obj_ksu_ev_can_h_t *o, int8_t in);
int decode_can_0x62e_gps_west(const can_obj_ksu_ev_can_h_t *o, int8_t *out);
int encode_can_0x62e_gps_west(can_obj_ksu_ev_can_h_t *o, int8_t in);

int decode_can_0x62f_spare63_1(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x62f_spare63_1(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62f_spare63_2(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x62f_spare63_2(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62f_spare63_3(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x62f_spare63_3(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x62f_generic_pid_duty1(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x62f_generic_pid_duty1(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x62f_generic_pid_duty2(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x62f_generic_pid_duty2(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x6b1_Pack_DCL(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x6b1_Pack_DCL(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x6b1_Pack_CCL(const can_obj_ksu_ev_can_h_t *o, uint16_t *out);
int encode_can_0x6b1_Pack_CCL(can_obj_ksu_ev_can_h_t *o, uint16_t in);
int decode_can_0x6b1_High_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                      uint8_t *out);
int encode_can_0x6b1_High_Temperature(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b1_Low_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                     uint8_t *out);
int encode_can_0x6b1_Low_Temperature(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b1_Average_Temperature(const can_obj_ksu_ev_can_h_t *o,
                                         uint8_t *out);
int encode_can_0x6b1_Average_Temperature(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b1_CRC_Checksum(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x6b1_CRC_Checksum(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x6b2_Pack_Current(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x6b2_Pack_Current(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x6b2_Pack_Open_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x6b2_Pack_Open_Voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x6b2_Pack_Inst_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                       double *out);
int encode_can_0x6b2_Pack_Inst_Voltage(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x6b2_Pack_Summed_Voltage(const can_obj_ksu_ev_can_h_t *o,
                                         double *out);
int encode_can_0x6b2_Pack_Summed_Voltage(can_obj_ksu_ev_can_h_t *o, double in);

int decode_can_0x6b3_Pack_SOC(const can_obj_ksu_ev_can_h_t *o, double *out);
int encode_can_0x6b3_Pack_SOC(can_obj_ksu_ev_can_h_t *o, double in);
int decode_can_0x6b3_Blank1(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank1(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b3_Blank2(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank2(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b3_Blank3(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank3(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b3_Blank4(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank4(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b3_Blank5(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank5(can_obj_ksu_ev_can_h_t *o, uint8_t in);
int decode_can_0x6b3_Blank6(const can_obj_ksu_ev_can_h_t *o, uint8_t *out);
int encode_can_0x6b3_Blank6(can_obj_ksu_ev_can_h_t *o, uint8_t in);

#ifdef __cplusplus
}
#endif

#endif
